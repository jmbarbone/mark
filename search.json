[{"path":"https://jmbarbone.github.io/mark/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Jordan Mark Barbone Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jmbarbone.github.io/mark/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Mark Barbone. Author, copyright holder, maintainer.","code":""},{"path":"https://jmbarbone.github.io/mark/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbone J (2025). mark: Miscellaneous, Analytic R Kernels. R package version 0.8.3.9001, https://CRAN.R-project.org/package=mark.","code":"@Manual{,   title = {mark: Miscellaneous, Analytic R Kernels},   author = {Jordan Mark Barbone},   year = {2025},   note = {R package version 0.8.3.9001},   url = {https://CRAN.R-project.org/package=mark}, }"},{"path":"https://jmbarbone.github.io/mark/index.html","id":"mark","dir":"","previous_headings":"","what":"Miscellaneous, Analytic R Kernels","title":"Miscellaneous, Analytic R Kernels","text":"Miscellaneous, Analytic R Kernels R package set general use functions data analytics. developed mostly personal use real goal limit time spend searching thing think use worked well problem might slightly different know change . parts happily ripped (hopefully) credited others.","code":""},{"path":"https://jmbarbone.github.io/mark/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Miscellaneous, Analytic R Kernels","text":"can download current CRAN version : can development version GitHub :","code":"install.packages(\"mark\") remotes::install_github(\"jmbarbone/mark\")"},{"path":"https://jmbarbone.github.io/mark/index.html","id":"select-examples","dir":"","previous_headings":"","what":"Select examples","title":"Miscellaneous, Analytic R Kernels","text":"package contains many variety functions, useful, much. selection functions potential useful others: Get dates sloppy entries: Slice strings: Read bibliographies: matching: Small functions working data.frames: Counts proportions: Date time differences: Simple factors:","code":"library(mark) #>  #> Attaching package: 'mark' #> The following object is masked from 'package:usethis': #>  #>     use_author #> The following objects are masked from 'package:base': #>  #>     sort_by, within bad_dates <- c(\"2020 Dec 8th\", \"1970 May\", \"??\", \"1984 UNK UN\") date_from_partial(bad_dates) #> [1] \"2020-12-08\" \"1970-05-01\" NA           \"1984-01-01\" date_from_partial(bad_dates, method = \"max\") #> [1] \"2020-12-08\" \"1970-05-31\" NA           \"1984-12-31\" date_from_partial(c(\"May 2000\", \"08Dec2020\"), format = \"dmy\") #> [1] \"2000-05-01\" \"2020-12-08\" x <- stringi::stri_rand_lipsum(1) str_slice(x, n = 50L) #>  [1] \"Lorem ipsum dolor sit amet, nisl eleifend sed proi\" #>  [2] \"n sed at. Class maximus, ante mi sed ridiculus eni\" #>  [3] \"m mus, sollicitudin. Maecenas penatibus luctus don\" #>  [4] \"ec turpis erat pretium in vulputate accumsan. Amet\" #>  [5] \" quis arcu phasellus facilisi facilisis odio integ\" #>  [6] \"er sit. Nunc venenatis duis vitae in non mauris ri\" #>  [7] \"sus. Vel consectetur sed sapien arcu sed massa nec\" #>  [8] \" egestas, malesuada condimentum felis a? Et ut pel\" #>  [9] \"lentesque consequat sed at torquent, sociosqu. Sod\" #> [10] \"ales donec arcu laoreet luctus auctor mauris mauri\" #> [11] \"s nisl primis nascetur feugiat scelerisque libero.\" #> [12] \" Sed maximus vehicula dictum lacus libero pharetra\" #> [13] \" sed. Egestas maximus venenatis egestas leo orci, \" #> [14] \"tellus consectetur velit litora nascetur, a. Ferme\" #> [15] \"ntum aptent lobortis elementum netus integer variu\" #> [16] \"s euismod ac ornare porttitor non ut quam, mollis.\" #> [17] \" Scelerisque cursus amet primis. Vestibulum non co\" #> [18] \"nsectetur aliquam mollis velit accumsan. Condiment\" #> [19] \"um sit sed eu dapibus habitant faucibus interdum. \" #> [20] \"Vel libero, amet lacus aliquam ac sit porta, leo l\" #> [21] \"eo.\" str_slice_by_word(x) #>  [1] \"Lorem ipsum dolor sit amet, nisl eleifend sed proin sed at. Class maximus, ante\"  #>  [2] \"mi sed ridiculus enim mus, sollicitudin. Maecenas penatibus luctus donec turpis\"  #>  [3] \"erat pretium in vulputate accumsan. Amet quis arcu phasellus facilisi facilisis\"  #>  [4] \"odio integer sit. Nunc venenatis duis vitae in non mauris risus. Vel consectetur\" #>  [5] \"sed sapien arcu sed massa nec egestas, malesuada condimentum felis a? Et ut\"      #>  [6] \"pellentesque consequat sed at torquent, sociosqu. Sodales donec arcu laoreet\"     #>  [7] \"luctus auctor mauris mauris nisl primis nascetur feugiat scelerisque libero. Sed\" #>  [8] \"maximus vehicula dictum lacus libero pharetra sed. Egestas maximus venenatis\"     #>  [9] \"egestas leo orci, tellus consectetur velit litora nascetur, a. Fermentum aptent\"  #> [10] \"lobortis elementum netus integer varius euismod ac ornare porttitor non ut quam,\" #> [11] \"mollis. Scelerisque cursus amet primis. Vestibulum non consectetur aliquam\"       #> [12] \"mollis velit accumsan. Condimentum sit sed eu dapibus habitant faucibus\"          #> [13] \"interdum. Vel libero, amet lacus aliquam ac sit porta, leo leo.\" file <- system.file(\"extdata\", \"example-bib.txt\", package = \"mark\") bib <- read_bib(file) tibble::as_tibble(bib) #> # A tibble: 13 × 23 #>    key          field author title journal year  number pages month note  volume #>    <chr>        <chr> <chr>  <chr> <chr>   <chr> <chr>  <chr> <chr> <chr> <chr>  #>  1 article      arti… Peter… The … The na… 1993  2      201-… 7     An o… 4      #>  2 book         book  Peter… The … <NA>    1993  <NA>   <NA>  7     An o… 4      #>  3 booklet      book… Peter… The … <NA>    1993  <NA>   <NA>  7     An o… <NA>   #>  4 conference   conf… Peter… The … <NA>    1993  <NA>   213   7     An o… 4      #>  5 inbook       inbo… Peter… The … <NA>    1993  <NA>   201-… 7     An o… 4      #>  6 incollection inco… Peter… The … <NA>    1993  <NA>   201-… 7     An o… 4      #>  7 manual       manu… Peter… The … <NA>    1993  <NA>   <NA>  7     An o… <NA>   #>  8 mastersthes… mast… Peter… The … <NA>    1993  <NA>   <NA>  7     An o… <NA>   #>  9 misc         misc  Peter… The … <NA>    1993  <NA>   <NA>  7     An o… <NA>   #> 10 phdthesis    phdt… Peter… The … <NA>    1993  <NA>   <NA>  7     An o… <NA>   #> 11 proceedings  proc… <NA>   The … <NA>    1993  <NA>   <NA>  7     An o… 4      #> 12 techreport   tech… Peter… The … <NA>    1993  2      <NA>  7     An o… <NA>   #> 13 unpublished  unpu… Peter… The … <NA>    1993  <NA>   <NA>  7     An o… <NA>   #> # ℹ 12 more variables: publisher <chr>, series <chr>, address <chr>, #> #   edition <chr>, isbn <chr>, howpublished <chr>, booktitle <chr>, #> #   editor <chr>, organization <chr>, chapter <chr>, school <chr>, #> #   institution <chr> 1:10 %out% c(1, 3, 5, 9) # opposite of %in%  #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE letters[1:5] %wo% letters[3:7] #> [1] \"a\" \"b\" letters[1:5] %wi% letters[3:7] #> [1] \"c\" \"d\" \"e\" x <- list(a = 1:5, b = letters[1:5]) quick_df(x) #>   a b #> 1 1 a #> 2 2 b #> 3 3 c #> 4 4 d #> 5 5 e  vector2df(x[[\"b\"]], name = NULL) #>   value #> 1     a #> 2     b #> 3     c #> 4     d #> 5     e  quick_dfl(a = 1:3, b = list(1:5, 6:10, 11:15)) #>   a                  b #> 1 1      1, 2, 3, 4, 5 #> 2 2     6, 7, 8, 9, 10 #> 3 3 11, 12, 13, 14, 15 set.seed(42) x <- sample(1:5, 20, TRUE, 5:1/2) counts(x) #> 4 5 1 3 2  #> 2 4 4 5 5 props(x) #>    4    5    1    3    2  #> 0.10 0.20 0.20 0.25 0.25  df <- as.data.frame(matrix(sample(1:2, 60, TRUE), byrow = TRUE, ncol = 3)) counts(df, c(\"V1\", \"V2\")) #>   V1 V2 freq #> 1  1  1    5 #> 2  1  2    4 #> 3  2  2    8 #> 4  2  1    3 props(df, 1:3) #>   V1 V2 V3      prop #> 1  1  1  1 0.4285714 #> 2  1  1  2 0.2857143 #> 3  1  2  2 0.4285714 #> 4  2  2  1 0.7142857 #> 5  2  1  2 0.4285714 #> 6  2  2  2 0.4285714 #> 7  1  2  1 0.1428571 x <- as.POSIXlt(\"2021-02-13 05:02:30\", tz = \"America/New_York\") + c(0, -1, 2) * 3600 * 24 y <- as.POSIXlt(\"2020-02-13 05:02:30\", tz = \"America/New_York\") + c(0, -2, 4) * 3600 * 24  # comparison with base::difftime() (note the order of x and y) difftime(y, x, units = \"days\") #> Time differences in days #> [1] -366 -367 -364 diff_time_days(x, y) #> Time differences in days #> [1] -366 -367 -364  difftime(y, x, units = \"secs\") #> Time differences in secs #> [1] -31622400 -31708800 -31449600 diff_time_secs(x, y) #> Time differences in seconds #> [1] -31622400 -31708800 -31449600  # Year (by days, months, etc) diff_time_years(x, y) #> Time differences in years (365 days) #> [1] -1.0027397 -1.0054795 -0.9972603 diff_time_myears(x, y) #> Time differences in years (30-day months) #> [1] -1.016667 -1.019444 -1.011111  # Set time zones diff_time_hours(x, y, \"GMT\", \"America/New_York\")                          #> Time differences in hours #> [1] -8789 -8813 -8741 diff_time_hours(x, x, \"GMT\", c(\"America/Los_Angeles\", \"America/New_York\", \"Europe/London\")) # note x, x #> Time differences in hours #> [1] -8 -5  0 diff_time_days(x, y, NULL, 31536000)  #> Time differences in days #> [1] -0.994213 -1.994213  1.005787 fact(c(\"a\", \"c\", NA, \"a\", \"b\", NA, \"a\", \"c\")) # no sorting #> [1] a    c    <NA> a    b    <NA> a    c    #> Levels: a c b <NA> fact(c(-1, 5, 2, NA, 3))                      # sorting #> [1] -1   5    2    <NA> 3    #> Levels: -1 2 3 5 <NA> fact(c(NA, FALSE, TRUE, FALSE, TRUE, NA))     # fixed #> [1] <NA>  FALSE TRUE  FALSE TRUE  <NA>  #> Levels: TRUE FALSE <NA>"},{"path":"https://jmbarbone.github.io/mark/reference/add_file_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Add file timestamp — add_file_timestamp","title":"Add file timestamp — add_file_timestamp","text":"Adds timestamp file","code":""},{"path":"https://jmbarbone.github.io/mark/reference/add_file_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add file timestamp — add_file_timestamp","text":"","code":"add_file_timestamp(   x,   ts = Sys.time(),   format = \"%Y-%m-%d %H%M%S\",   sep = \" \" )"},{"path":"https://jmbarbone.github.io/mark/reference/add_file_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add file timestamp — add_file_timestamp","text":"x vector files ts single timestamp vector timestamps (default: Sys.time()) format format applied times; set NULL skip formatting sep character vector length 1 separate timestamp file name","code":""},{"path":"https://jmbarbone.github.io/mark/reference/add_file_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add file timestamp — add_file_timestamp","text":"full name paths appended time stamp","code":""},{"path":"https://jmbarbone.github.io/mark/reference/add_file_timestamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add file timestamp — add_file_timestamp","text":"","code":"file1 <- tempfile(fileext = \".txt\") file2 <- tempfile()  add_file_timestamp(file1) #> /tmp/RtmprmvHIh/file1c73562aa626 2025-05-10 180952.txt add_file_timestamp(file2) #> /tmp/RtmprmvHIh/file1c732be68f57 2025-05-10 180952  file.remove(file1, file2) #> Warning: cannot remove file '/tmp/RtmprmvHIh/file1c73562aa626.txt', reason 'No such file or directory' #> Warning: cannot remove file '/tmp/RtmprmvHIh/file1c732be68f57', reason 'No such file or directory' #> [1] FALSE FALSE"},{"path":"https://jmbarbone.github.io/mark/reference/are_identical.html","id":null,"dir":"Reference","previous_headings":"","what":"Identical extensions — are_identical","title":"Identical extensions — are_identical","text":"Extensions use base::identical()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/are_identical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identical extensions — are_identical","text":"","code":"are_identical(..., params = NULL)"},{"path":"https://jmbarbone.github.io/mark/reference/are_identical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identical extensions — are_identical","text":"... Vectors values compare, element-wise equal length params Additional params (named list arguments base::identical)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/are_identical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identical extensions — are_identical","text":"logical vector TRUE/FALSE equal length ... vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/are_identical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identical extensions — are_identical","text":"","code":"x <- y <- z <- 1:5 y[2] <- 3L z[5] <- NA_integer_  identical(x, y)        # compare entire vector #> [1] FALSE are_identical(x, y)    # element-wise #> [1]  TRUE FALSE  TRUE  TRUE  TRUE are_identical(x, y, z) # 3 or more vectors #> [1]  TRUE FALSE  TRUE  TRUE FALSE"},{"path":"https://jmbarbone.github.io/mark/reference/array_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Array extract — array_extract","title":"Array extract — array_extract","text":"Extract dimensions array","code":""},{"path":"https://jmbarbone.github.io/mark/reference/array_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Array extract — array_extract","text":"","code":"array_extract(.arr, ..., default = \"1\")"},{"path":"https://jmbarbone.github.io/mark/reference/array_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Array extract — array_extract","text":".arr array ... named list array dimension number value default default dimension index","code":""},{"path":"https://jmbarbone.github.io/mark/reference/array_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Array extract — array_extract","text":"value array arr","code":""},{"path":"https://jmbarbone.github.io/mark/reference/array_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Array extract — array_extract","text":"","code":"x <- array(rep(NA, 27), dim = c(3, 3, 3)) x[1, 2, 3] <- TRUE x[1, 2, 3] #> [1] TRUE x #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]   NA   NA   NA #> [2,]   NA   NA   NA #> [3,]   NA   NA   NA #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]   NA   NA   NA #> [2,]   NA   NA   NA #> [3,]   NA   NA   NA #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]   NA TRUE   NA #> [2,]   NA   NA   NA #> [3,]   NA   NA   NA #>  array_extract(x, `2` = 2, `3` = 3) #> [1] TRUE"},{"path":"https://jmbarbone.github.io/mark/reference/as_ordered.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordered — as_ordered","title":"Ordered — as_ordered","text":"ordered","code":""},{"path":"https://jmbarbone.github.io/mark/reference/as_ordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordered — as_ordered","text":"","code":"as_ordered(x)  # Default S3 method as_ordered(x)"},{"path":"https://jmbarbone.github.io/mark/reference/as_ordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordered — as_ordered","text":"x vector values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/as_ordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordered — as_ordered","text":"ordered vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/as_ordered.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordered — as_ordered","text":"Simple implementation ordered.  x ordered simply returned.  x factor ordered class added. Otherwise, x made factor fact() ordered class added. Unlike just fact, ordered replace NA levels NA_integer_ work appropriately functions.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/as_ordered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordered — as_ordered","text":"","code":"x <- c(\"a\", NA, \"b\") x <- fact(x) str(x) # NA is 3L #>  Factor w/ 3 levels \"a\",\"b\",NA: 1 3 2 #>  - attr(*, \"uniques\")= chr [1:3] \"a\" \"b\" NA #>  - attr(*, \"na\")= int 3  y <- x class(y) <- c(\"ordered\", class(y)) max(y) #> [1] <NA> #> Levels: a < b max(y, na.rm = TRUE) # returns NA -- bad #> [1] b #> Levels: a < b  # as_ordered() removes the NA level x <- as_ordered(x) str(x) #>  Ord.factor w/ 2 levels \"a\"<\"b\": 1 NA 2 #>  - attr(*, \"uniques\")= chr [1:2] \"a\" \"b\" #>  - attr(*, \"na\")= int 0 max(x, na.rm = TRUE) # returns b -- correct #> [1] b #> Levels: a < b"},{"path":"https://jmbarbone.github.io/mark/reference/base_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Alpha base — base_alpha","title":"Alpha base — base_alpha","text":"Base 26 conversion letters","code":""},{"path":"https://jmbarbone.github.io/mark/reference/base_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alpha base — base_alpha","text":"","code":"base_alpha(x, base = 26)"},{"path":"https://jmbarbone.github.io/mark/reference/base_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alpha base — base_alpha","text":"x string letters.  Non characters removed. base numeric","code":""},{"path":"https://jmbarbone.github.io/mark/reference/base_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alpha base — base_alpha","text":"vector integers","code":""},{"path":"https://jmbarbone.github.io/mark/reference/base_alpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alpha base — base_alpha","text":"","code":"base_alpha(\"AB\") #> [1] 28 base_alpha(\"XFD\") #> [1] 4684 base_alpha(c(\"JMB\", \"Jordan Mark\", \"XKCD\")) #> Warning: NAs introduced by coercion to integer range #> [1]  9050    NA 60792 sum(base_alpha(c(\"x\", \"k\", \"c\", \"d\"))) #> [1] 42"},{"path":"https://jmbarbone.github.io/mark/reference/base_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Base N conversion — base_n","title":"Base N conversion — base_n","text":"Convert base numbers","code":""},{"path":"https://jmbarbone.github.io/mark/reference/base_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base N conversion — base_n","text":"","code":"base_n(x, from = 10, to = 10)"},{"path":"https://jmbarbone.github.io/mark/reference/base_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base N conversion — base_n","text":"x vector integers , integer base convert ; must integer 1 10 can currently 10.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/base_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base N conversion — base_n","text":"vector integers converted base base ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/base_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base N conversion — base_n","text":"","code":"base_n(c(24, 22, 16), from = 7) #> [1] 18 16 13"},{"path":"https://jmbarbone.github.io/mark/reference/blank_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Blank values — blank_values","title":"Blank values — blank_values","text":"Detect blank values; select, remove columns entirely blank","code":""},{"path":"https://jmbarbone.github.io/mark/reference/blank_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blank values — blank_values","text":"","code":"is_blank(x, na_blank = FALSE, ws = TRUE)  select_blank_cols(x, na_blank = FALSE, ws = TRUE)  remove_blank_cols(x, na_blank = FALSE, ws = TRUE)  is_blank_cols(x, names = TRUE, na_blank = FALSE, ws = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/blank_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blank values — blank_values","text":"x object, data.frame *_cols() functions na_blank Logical, TRUE treats NA values blank ws Logical, TRUE treats elements entirely whitespace blanks names Logical, TRUE (default) return column names names vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/blank_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blank values — blank_values","text":"is_blank() logical vector indicating blank elements x select_blank_cols() x columns blank remove_blank_cols() x without columns blank is_blank_cols() logical vector: TRUE rows column blank, otherwise FALSE","code":""},{"path":"https://jmbarbone.github.io/mark/reference/blank_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blank values — blank_values","text":"Blank values values contain text","code":""},{"path":"https://jmbarbone.github.io/mark/reference/char2fact.html","id":null,"dir":"Reference","previous_headings":"","what":"Character to factor — char2fact","title":"Character to factor — char2fact","text":"Converts characters factors","code":""},{"path":"https://jmbarbone.github.io/mark/reference/char2fact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character to factor — char2fact","text":"","code":"char2fact(x, n = 5)  # Default S3 method char2fact(x, n = 5)  # S3 method for class 'character' char2fact(x, n = 5)  # S3 method for class 'factor' char2fact(x, n = 5)  # S3 method for class 'data.frame' char2fact(x, n = 5)"},{"path":"https://jmbarbone.github.io/mark/reference/char2fact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character to factor — char2fact","text":"x vector characters n limit number unique values factor","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/checkOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check options — checkOptions","title":"Check options — checkOptions","text":"name x checks current option value reports difference message.  change options","code":""},{"path":"https://jmbarbone.github.io/mark/reference/checkOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check options — checkOptions","text":"","code":"checkOptions(x)"},{"path":"https://jmbarbone.github.io/mark/reference/checkOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check options — checkOptions","text":"x named list new options","code":""},{"path":"https://jmbarbone.github.io/mark/reference/checkOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check options — checkOptions","text":"Invisible, list current options options()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/checkOptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check options — checkOptions","text":"Checks reports options","code":""},{"path":"https://jmbarbone.github.io/mark/reference/checkOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check options — checkOptions","text":"","code":"op <- options()  x <- list(width = -20, warning.length = 2, probably_not_a_real_option = 2) checkOptions(x) #> Option(s) updated : #>  \"width\" #>    old : 80 #>    new : -20 #>  \"warning.length\" #>    old : 1000 #>    new : 2 # pointless, but shows that no messages are given identical(options(), checkOptions(options())) #> [1] TRUE  options(op)"},{"path":"https://jmbarbone.github.io/mark/reference/chr_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Character split — chr_split","title":"Character split — chr_split","text":"Split apart string character","code":""},{"path":"https://jmbarbone.github.io/mark/reference/chr_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character split — chr_split","text":"","code":"chr_split(x)"},{"path":"https://jmbarbone.github.io/mark/reference/chr_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character split — chr_split","text":"x vector strings split","code":""},{"path":"https://jmbarbone.github.io/mark/reference/chr_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character split — chr_split","text":"character vector length nchar(x)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/chr_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character split — chr_split","text":"","code":"chr_split(\"split this\") #>  [1] \"s\" \"p\" \"l\" \"i\" \"t\" \" \" \"t\" \"h\" \"i\" \"s\""},{"path":"https://jmbarbone.github.io/mark/reference/clipboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Write to and read from the clipboard — clipboard","title":"Write to and read from the clipboard — clipboard","text":"Wrappers working clipboard","code":""},{"path":"https://jmbarbone.github.io/mark/reference/clipboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write to and read from the clipboard — clipboard","text":"","code":"write_clipboard(x, ...)  # Default S3 method write_clipboard(x, ...)  # S3 method for class 'data.frame' write_clipboard(x, sep = \"\\t\", row.names = FALSE, ...)  # S3 method for class 'matrix' write_clipboard(x, sep = \"\\t\", ...)  # S3 method for class 'list' write_clipboard(x, sep = \"\\t\", ...)  read_clipboard(method = read_clipboard_methods(), ...)  read_clipboard_methods()"},{"path":"https://jmbarbone.github.io/mark/reference/clipboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write to and read from the clipboard — clipboard","text":"x object ... Additional arguments sent methods utils::write.table() sep field separator string.  Values within row     x separated string. row.names either logical value indicating whether row     names x written along x,     character vector row names written. method Method switch loading clipboard","code":""},{"path":"https://jmbarbone.github.io/mark/reference/clipboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write to and read from the clipboard — clipboard","text":"write_clipboard() None, called side effects read_clipboard() Either vector, data.frame, tibble depending method chosen. Unlike utils::readClipboard(), empty clipboard value returns NA rather \"\"","code":""},{"path":"https://jmbarbone.github.io/mark/reference/clipboard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write to and read from the clipboard — clipboard","text":"functions rely clipr::read_clip() utils::writeClipboard() available Windows 10. copying pasting floats, may rounding can occur.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/clipboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write to and read from the clipboard — clipboard","text":"","code":"# Will only run on windows if (Sys.info()[[\"sysname\"]] == \"Windows\") {   foo <- function(x) {     write_clipboard(x)     y <- read_clipboard()     res <- all.equal(x, y)     if (isTRUE(res)) return(\"All equal\")     print(x)     print(y)   }   foo(1:4)   foo(seq(-1, 1, .02))   foo(Sys.Date() + 1:4)    # May have some rounding issues   x <- \"0.316362437326461129\"   write_clipboard(x)   res <- as.character(read_clipboard())   all.equal(x, res)   x; res }"},{"path":"https://jmbarbone.github.io/mark/reference/complete_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete cases — complete_cases","title":"Complete cases — complete_cases","text":"Return completed cases data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/complete_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete cases — complete_cases","text":"","code":"complete_cases(data, cols = NULL, invert = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/complete_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete cases — complete_cases","text":"data data.frame cols Colnames numbers remove NA values ; NULL (default) use columns invert Logical, TRUE return incomplete cases","code":""},{"path":"https://jmbarbone.github.io/mark/reference/complete_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complete cases — complete_cases","text":"data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/complete_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete cases — complete_cases","text":"","code":"x <- data.frame(   a = 1:5,   b = c(1, NA, 3, 4, 5),   c = c(1, NA, NA, 4, 5) )  complete_cases(x) #>   a b c #> 1 1 1 1 #> 2 4 4 4 #> 3 5 5 5 complete_cases(x, invert = TRUE) # returns the incomplete rows #>   a  b  c #> 1 2 NA NA #> 2 3  3 NA complete_cases(x, \"a\") #>   a  b  c #> 1 1  1  1 #> 2 2 NA NA #> 3 3  3 NA #> 4 4  4  4 #> 5 5  5  5 complete_cases(x, \"b\") #>   a b  c #> 1 1 1  1 #> 2 3 3 NA #> 3 4 4  4 #> 4 5 5  5 complete_cases(x, \"c\") #>   a b c #> 1 1 1 1 #> 2 4 4 4 #> 3 5 5 5"},{"path":"https://jmbarbone.github.io/mark/reference/counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Count observations by unique values — counts","title":"Count observations by unique values — counts","text":"Variables return order appear.  Even factors shown order appearance vector. 2 methods counting vectors.  default method uses base::tabulate() (workhorse base::table() call pseudo_id() transform inputs integers.  logical method counts TRUE, FALSE NA values, much quicker.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count observations by unique values — counts","text":"","code":"counts(x, ...)  # S3 method for class 'data.frame' counts(x, cols, sort = FALSE, ..., .name = \"freq\")  props(x, ...)  # Default S3 method props(x, sort = FALSE, na.rm = FALSE, ...)  # S3 method for class 'data.frame' props(x, cols, sort = FALSE, na.rm = FALSE, ..., .name = \"prop\")"},{"path":"https://jmbarbone.github.io/mark/reference/counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count observations by unique values — counts","text":"x vector data.frame ... Arguments passed methods cols vector column names indexes sort Logical, TRUE sort values (counts) returning. factors sort factor levels.  effect logical vectors, already return order FALSE, TRUE, NA. .name name new column na.rm TRUE remove NA values proportions","code":""},{"path":"https://jmbarbone.github.io/mark/reference/counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count observations by unique values — counts","text":"named vector integers doubles (counts, props, respectively) data.frame columns column chosen .name chosen summary","code":""},{"path":"https://jmbarbone.github.io/mark/reference/counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count observations by unique values — counts","text":"Get counts proportions unique observations vector columns data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count observations by unique values — counts","text":"","code":"x <- sample(1:5, 10, TRUE) counts(x) #> 5 4 1 2 3  #> 5 2 1 1 1  props(x) #>   5   4   1   2   3  #> 0.5 0.2 0.1 0.1 0.1   x <- quick_df(list(   a = c(\"a\", \"c\", \"a\", \"c\", \"d\", \"b\"),   b = c(\"a\", \"a\", \"a\", \"c\", \"c\", \"b\"),   c = c(\"a\", \"a\", \"a\", \"c\", \"b\", \"b\") ))  counts(x, \"a\") #>   a freq #> 1 a    2 #> 2 c    2 #> 3 d    1 #> 4 b    1 counts(x, c(\"a\", \"b\", \"c\")) #>   a b c freq #> 1 a a a    2 #> 2 c a a    1 #> 3 c c c    1 #> 4 d c b    1 #> 5 b b b    1 props(x, 2) #>   b      prop #> 1 a 0.5000000 #> 2 c 0.3333333 #> 3 b 0.1666667 props(x, 1:3) #>   a b c prop #> 1 a a a  0.4 #> 2 c a a  0.2 #> 3 c c c  0.2 #> 4 d c b  0.2 #> 5 b b b  0.2  props(c(1, 1, 3, NA, 4)) #>    1    3    4 <NA>  #>  0.4  0.2  0.2  0.2  props(c(1, 1, 3, NA, 4), na.rm = TRUE) #>    1    3    4 <NA>  #> 0.50 0.25 0.25   NA"},{"path":"https://jmbarbone.github.io/mark/reference/date_from_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial dates — date_from_partial","title":"Partial dates — date_from_partial","text":"Derive date vector partial date string","code":""},{"path":"https://jmbarbone.github.io/mark/reference/date_from_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial dates — date_from_partial","text":"","code":"date_from_partial(   x,   format = \"ymd\",   method = c(\"min\", \"max\"),   year_replacement = NA_integer_ )"},{"path":"https://jmbarbone.github.io/mark/reference/date_from_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial dates — date_from_partial","text":"x vector dates written characters format Format order date (accepts combinations 'y', 'm', 'd') method Method reporting partial dates either earliest possible date (\"min\") latest possible date (\"max\"); dates missing days adjusted accordingly month , needed, leap year year_replacement (Default: NA_integer_) set, use replacement dates contain missing years","code":""},{"path":"https://jmbarbone.github.io/mark/reference/date_from_partial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial dates — date_from_partial","text":"vector Dates","code":""},{"path":"https://jmbarbone.github.io/mark/reference/date_from_partial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial dates — date_from_partial","text":"Takes character argument attempts create date object part date string missing.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/date_from_partial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial dates — date_from_partial","text":"","code":"x <- c(\"2020-12-17\", NA_character_, \"\", \"2020-12-UN\", \"2020-12-UN\",        \"2019-Unknown-00\", \"UNK-UNK-UNK\", \"1991-02-UN\", \"    \",        \"2020January20\") data.frame(   x = x,   min = date_from_partial(x),   max = date_from_partial(x, method = \"max\"),   year = date_from_partial(x, year_replacement = 1900) ) #>                  x        min        max       year #> 1       2020-12-17 2020-12-17 2020-12-17 2020-12-17 #> 2             <NA>       <NA>       <NA>       <NA> #> 3                        <NA>       <NA>       <NA> #> 4       2020-12-UN 2020-12-01 2020-12-31 2020-12-01 #> 5       2020-12-UN 2020-12-01 2020-12-31 2020-12-01 #> 6  2019-Unknown-00 2019-01-01 2019-12-31 2019-01-01 #> 7      UNK-UNK-UNK       <NA>       <NA> 1900-01-01 #> 8       1991-02-UN 1991-02-01 1991-02-28 1991-02-01 #> 9                        <NA>       <NA>       <NA> #> 10   2020January20 2020-01-20 2020-01-20 2020-01-20"},{"path":"https://jmbarbone.github.io/mark/reference/depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Depth — depth","title":"Depth — depth","text":"Functions extract 'depth' object","code":""},{"path":"https://jmbarbone.github.io/mark/reference/depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depth — depth","text":"","code":"depth(x, ...)  # Default S3 method depth(x, ...)  # S3 method for class 'list' depth(x, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Depth — depth","text":"x object ... Possible additional arguments passed methods (use)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Depth — depth","text":"single integer","code":""},{"path":"https://jmbarbone.github.io/mark/reference/depth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Depth — depth","text":"function count empty lists (list()) level NULL objects.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Depth — depth","text":"","code":"a <- c(1, 2, 3) depth(a) # Vectors are 1L #> [1] 1  b <- list(a = 1, b = list(list(1))) depth(b) #> [1] 3"},{"path":"https://jmbarbone.github.io/mark/reference/detail.html","id":null,"dir":"Reference","previous_headings":"","what":"Details an object — detail","title":"Details an object — detail","text":"Provides details object","code":""},{"path":"https://jmbarbone.github.io/mark/reference/detail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Details an object — detail","text":"","code":"detail(x, ...)  # Default S3 method detail(x, factor_n = 5L, ...)  # S3 method for class 'data.frame' detail(x, factor_n = 5L, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/detail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Details an object — detail","text":"x object ... Additional arguments passed methods factor_n integer threshold making factors; convert character vectors factor_n less unique values fact; setting NA ignore ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/detail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Details an object — detail","text":"","code":"x <- sample(letters[1:4], 10, TRUE) detail(x) #>          class    type label  n na min_c max_c level level_n note comment #> 1 fact; factor integer  <NA> 10  0     1     1     b       3 <NA>    <NA> #> 2 fact; factor integer  <NA> 10  0     1     1     c       3 <NA>    <NA> #> 3 fact; factor integer  <NA> 10  0     1     1     a       3 <NA>    <NA> #> 4 fact; factor integer  <NA> 10  0     1     1     d       1 <NA>    <NA>  df <- quick_df(list(   x = x,   y = round(runif(10), 2),   z = Sys.Date() + runif(10) * 100 ))  detail(df) #>   i col        class    type label  n na      min_c      max_c level level_n #> 1 1   x fact; factor integer  <NA> 10  0          1          1     b       3 #> 2 1   x fact; factor integer  <NA> 10  0          1          1     c       3 #> 3 1   x fact; factor integer  <NA> 10  0          1          1     a       3 #> 4 1   x fact; factor integer  <NA> 10  0          1          1     d       1 #> 5 2   y      numeric  double  <NA> 10  0       0.18       0.95  <NA>      NA #> 6 3   z         Date  double  <NA> 10  0 2025-05-19 2025-08-17  <NA>      NA #>   note comment #> 1 <NA>    <NA> #> 2 <NA>    <NA> #> 3 <NA>    <NA> #> 4 <NA>    <NA> #> 5 <NA>    <NA> #> 6 <NA>    <NA>"},{"path":"https://jmbarbone.github.io/mark/reference/diff_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Diff time wrappers — diff_time","title":"Diff time wrappers — diff_time","text":"Wrappers computing diff times","code":""},{"path":"https://jmbarbone.github.io/mark/reference/diff_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diff time wrappers — diff_time","text":"","code":"diff_time(   x,   y,   method = c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\", \"months\", \"years\", \"dyears\",     \"wyears\", \"myears\"),   tzx = NULL,   tzy = tzx )  diff_time_days(x, y, ...)  diff_time_weeks(x, y, ...)  diff_time_hours(x, y, ...)  diff_time_mins(x, y, ...)  diff_time_secs(x, y, ...)  diff_time_months(x, y, ...)  diff_time_years(x, y, ...)  diff_time_dyears(x, y, ...)  diff_time_wyears(x, y, ...)  diff_time_myears(x, y, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/diff_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diff time wrappers — diff_time","text":"x, y Vectors times method method report difference units time (see Units section) tzx, tzy time zones (see Time zones section) ... Additional arguments passed diff_time()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/diff_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diff time wrappers — diff_time","text":"diff_time vector, object","code":""},{"path":"https://jmbarbone.github.io/mark/reference/diff_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diff time wrappers — diff_time","text":"significant differences exist functions * class object returned longer difftime (print) difftime method.  makes exporting process easier data converted back numeric * difftime() computes difference time1 - time2, inverse feels bit nature: time difference x y * Additional units can used (detailed ) * Differences can sensitive time zones time zones passed tz parameter character vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/diff_time.html","id":"units","dir":"Reference","previous_headings":"","what":"Units","title":"Diff time wrappers — diff_time","text":"Units can used beyond available base::difftime().  use assumptions units time standardized can changed corresponding options. can calculated base::difftime() using units = \"days\" dtime class print specifications console less potential confusion. months Months number days mark.days_in_month (defaults: 30) years Years number days mark.days_in_year (defaults: 365) dyears Years number days mark.days_in_year (defaults: 365) (years) myears Years number days month mark.days_in_month (defaults: 30) wyears Years number weeks year mark.weeks_in_year (defaults: 52)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/diff_time.html","id":"time-zones","dir":"Reference","previous_headings":"","what":"Time zones","title":"Diff time wrappers — diff_time","text":"Time zones can passed either numeric vector GMT/UTC offsets (number seconds GMT) character vector. letter, need conform values base::OlsonNames(). default timezone can set options(mark.default_tz = .).  value can either numeric","code":""},{"path":"https://jmbarbone.github.io/mark/reference/drop_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop levels — drop_levels","title":"Drop levels — drop_levels","text":"Drop unused levels factor","code":""},{"path":"https://jmbarbone.github.io/mark/reference/drop_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop levels — drop_levels","text":"","code":"drop_levels(x, ...)  # S3 method for class 'data.frame' drop_levels(x, ...)  # S3 method for class 'fact' drop_levels(x, ...)  # S3 method for class 'factor' drop_levels(x, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/drop_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop levels — drop_levels","text":"x factor data.frame ... Additional arguments passed methods (used)","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/ept.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and evaluate text — ept","title":"Parse and evaluate text — ept","text":"wrapper eval(parse(text = .))","code":""},{"path":"https://jmbarbone.github.io/mark/reference/ept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and evaluate text — ept","text":"","code":"ept(x, envir = parent.frame())"},{"path":"https://jmbarbone.github.io/mark/reference/ept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and evaluate text — ept","text":"x character string parse envir environment evaluate code","code":""},{"path":"https://jmbarbone.github.io/mark/reference/ept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and evaluate text — ept","text":"evaluation x parsing","code":""},{"path":"https://jmbarbone.github.io/mark/reference/eval_named_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a Named Chunk — eval_named_chunk","title":"Evaluate a Named Chunk — eval_named_chunk","text":"Evaluate named chunk Rmd file.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/eval_named_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a Named Chunk — eval_named_chunk","text":"","code":"eval_named_chunk(rmd_file, label_name)"},{"path":"https://jmbarbone.github.io/mark/reference/eval_named_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a Named Chunk — eval_named_chunk","text":"rmd_file Absolute path rmd file label_name Name label","code":""},{"path":"https://jmbarbone.github.io/mark/reference/eval_named_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a Named Chunk — eval_named_chunk","text":"value evaluated code chunk","code":""},{"path":"https://jmbarbone.github.io/mark/reference/eval_named_chunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a Named Chunk — eval_named_chunk","text":"","code":"temp_rmd <- tempfile(fileext = \".rmd\")  text <- ' ```{r not this label} print(\"that is wrong\") ```  ```{r hello label} text <- \"hello, world\" print(text) print(TRUE) ```  ```{r another label} warning(\"wrong label\") ``` ' if (FALSE) { # \\dontrun{ writeLines(text, con = temp_rmd)  eval_named_chunk(temp_rmd, \"hello label\") # [1] \"hello, world\" # [1] TRUE  file.remove(temp_rmd) } # }"},{"path":"https://jmbarbone.github.io/mark/reference/expand_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Expands a vector — expand_by","title":"Expands a vector — expand_by","text":"Expands vector x y","code":""},{"path":"https://jmbarbone.github.io/mark/reference/expand_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expands a vector — expand_by","text":"","code":"expand_by(x, y, expand = c(\"x\", \"y\", \"intersect\", \"both\"), sort = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/expand_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expands a vector — expand_by","text":"x, y Vectors expand Character switch expand keep values intersect, values x y, retain values found. sort Logical, TRUE sort names output","code":""},{"path":"https://jmbarbone.github.io/mark/reference/expand_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expands a vector — expand_by","text":"vector expanded","code":""},{"path":"https://jmbarbone.github.io/mark/reference/expand_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expands a vector — expand_by","text":"","code":"x <- letters[c(3:2, 5, 9)] y <- letters[c(1:4, 8)] expand_by(x, y, \"x\") #>   c   b   e   i  #> \"c\" \"b\"  NA  NA  expand_by(x, y, \"y\") #>   a   b   c   d   h  #>  NA \"b\" \"c\"  NA  NA  expand_by(x, y, \"intersect\") #>   b   c  #> \"b\" \"c\"  expand_by(x, y, \"both\") #>   c   b   e   i   a   d   h  #> \"c\" \"b\" \"e\" \"i\"  NA  NA  NA"},{"path":"https://jmbarbone.github.io/mark/reference/fact.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor — fact","title":"Factor — fact","text":"Quickly create factor","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor — fact","text":"","code":"fact(x)  # Default S3 method fact(x)  # S3 method for class 'character' fact(x)  # S3 method for class 'numeric' fact(x)  # S3 method for class 'integer' fact(x)  # S3 method for class 'Date' fact(x)  # S3 method for class 'POSIXt' fact(x)  # S3 method for class 'logical' fact(x)  # S3 method for class 'factor' fact(x)  # S3 method for class 'fact' fact(x)  # S3 method for class 'pseudo_id' fact(x)  # S3 method for class 'haven_labelled' fact(x)"},{"path":"https://jmbarbone.github.io/mark/reference/fact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor — fact","text":"x vector values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor — fact","text":"vector equal length x class fact factor.  x ordered, class added .","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factor — fact","text":"fact() can 5 times quicker factor() .factor() bother sorting levels non-numeric data checks features.  simply converts vector factor unique values levels NAs included. fact.factor() perform several checks factor include NA levels check levels reordered conform methods.  fact.fact() method simple returns x.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact.html","id":"level-orders","dir":"Reference","previous_headings":"","what":"level orders","title":"Factor — fact","text":"order levels may adjusted rules depending class x: character order appearance numeric/integer/Date/POSIXt numeric order logical TRUE, FALSE, NA present factor Numeric levels can safely converted, otherwise ","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/fact2char.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor to character — fact2char","title":"Factor to character — fact2char","text":"Convert factor columns characters data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact2char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor to character — fact2char","text":"","code":"fact2char(data, threshold = 10)"},{"path":"https://jmbarbone.github.io/mark/reference/fact2char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor to character — fact2char","text":"data data.frame threshold threshold number levels met/exceeded transforming character","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact2char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor to character — fact2char","text":"data.frame data factors converted rule ","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/fact_na.html","id":null,"dir":"Reference","previous_headings":"","what":"fact with NA — fact_na","title":"fact with NA — fact_na","text":"Included NA values fact()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fact with NA — fact_na","text":"","code":"fact_na(x, remove = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/fact_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fact with NA — fact_na","text":"x fact object cohered fact remove TRUE removes NA value fact levels uniques attributes","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fact with NA — fact_na","text":"fact vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fact with NA — fact_na","text":"re-formats x value NAs found immediately within object rather accessed attributes.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/fact_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Fact reverse levels — fact_reverse","title":"Fact reverse levels — fact_reverse","text":"Reverse levels fact","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fact_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fact reverse levels — fact_reverse","text":"","code":"fact_reverse(x)"},{"path":"https://jmbarbone.github.io/mark/reference/fact_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fact reverse levels — fact_reverse","text":"x fact object (passed fact())","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fct_expand_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor Expand by Sequence — fct_expand_seq","title":"Factor Expand by Sequence — fct_expand_seq","text":"Expands ordered factor one level another","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fct_expand_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor Expand by Sequence — fct_expand_seq","text":"","code":"fct_expand_seq(   x,   min_lvl = min(x, na.rm = TRUE),   max_lvl = max(x, na.rm = TRUE),   by = 1L )"},{"path":"https://jmbarbone.github.io/mark/reference/fct_expand_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor Expand by Sequence — fct_expand_seq","text":"x ordered factor min_lvl start level sequence max_lvl end level sequence Integer, number steps ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fct_expand_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor Expand by Sequence — fct_expand_seq","text":"ordered vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fct_expand_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factor Expand by Sequence — fct_expand_seq","text":"Defaults min_lvl max_lvl minimum maximum levels ordered vector x.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fct_expand_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor Expand by Sequence — fct_expand_seq","text":"","code":"x <- ordered(letters[c(5:15, 2)], levels = letters) fct_expand_seq(x) #>  [1] b c d e f g h i j k l m n o #> 26 Levels: a < b < c < d < e < f < g < h < i < j < k < l < m < n < o < ... < z fct_expand_seq(x, \"g\", \"s\", 3L) # from \"g\" to \"s\" by 3 #> [1] g j m p s #> 26 Levels: a < b < c < d < e < f < g < h < i < j < k < l < m < n < o < ... < z fct_expand_seq(x, \"g\", \"t\", 3L) # same as above #> [1] g j m p s #> 26 Levels: a < b < c < d < e < f < g < h < i < j < k < l < m < n < o < ... < z  # from the first inherit level to the last observed fct_expand_seq(x, min(levels(x))) #>  [1] a b c d e f g h i j k l m n o #> 26 Levels: a < b < c < d < e < f < g < h < i < j < k < l < m < n < o < ... < z"},{"path":"https://jmbarbone.github.io/mark/reference/file_copy_md5.html","id":null,"dir":"Reference","previous_headings":"","what":"File copy with md5 hash check — file_copy_md5","title":"File copy with md5 hash check — file_copy_md5","text":"File copy md5 hash check","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_copy_md5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File copy with md5 hash check — file_copy_md5","text":"","code":"file_copy_md5(path, new_path, overwrite = NA, quiet = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/file_copy_md5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File copy with md5 hash check — file_copy_md5","text":"path character vector one paths. new_path character vector paths new locations. overwrite NA, saves md5 hashes match. Otherwise, see fs::file_copy(). quiet TRUE, suppresses messages md5 checks.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_copy_md5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File copy with md5 hash check — file_copy_md5","text":"path(s) new file(s), invisibly.  overwrite NA, paths returned two addition attributes, \"changed\", logical vector indicating whether file changed (NA file new), \"md5sum\", list md5sums old new md5 sums.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_info.html","id":null,"dir":"Reference","previous_headings":"","what":"File information utils — file_info","title":"File information utils — file_info","text":"utility functions dealing files","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File information utils — file_info","text":"","code":"newest_file(x)  newest_dir(x)  oldest_file(x)  oldest_dir(x)  largest_file(x)  smallest_file(x)"},{"path":"https://jmbarbone.github.io/mark/reference/file_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File information utils — file_info","text":"x vector file paths","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File information utils — file_info","text":"full file path","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"File name — file_name","title":"File name — file_name","text":"Basename file without extension","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File name — file_name","text":"","code":"file_name(x, compression = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File name — file_name","text":"x character vector giving file paths. compression logical: compression extension .gz,     .bz2 .xz removed first?","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File name — file_name","text":"file name path without extension","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a file using windows file associations — file_utils","title":"Open a file using windows file associations — file_utils","text":"Opens given files(s)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a file using windows file associations — file_utils","text":"","code":"open_file(x)  file_open(x)  shell_exec(x)  list_files(   x = \".\",   pattern = utils::glob2rx(glob),   glob = NULL,   ignore_case = FALSE,   all = FALSE,   negate = FALSE,   basename = FALSE )  list_dirs(   x = \".\",   pattern = NULL,   ignore_case = FALSE,   all = FALSE,   basename = FALSE,   negate = FALSE )"},{"path":"https://jmbarbone.github.io/mark/reference/file_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a file using windows file associations — file_utils","text":"x character vector paths pattern, glob Pattern search files.  glob absorbed pattern, utils::glob2rx(). ignore_case logical. pattern-matching case-insensitive? logical value. FALSE, names visible files returned (following Unix-style visibility, files whose name start dot). TRUE, file names returned. negate Logical, TRUE inversely select files match provided pattern basename TRUE searches pattern basename, otherwise entire path","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a file using windows file associations — file_utils","text":"open_file(), shell_exec(): logical vector TRUE successfully opened, FALSE NA try open (file found) list_files(), list_dirs(): vector full paths","code":""},{"path":"https://jmbarbone.github.io/mark/reference/file_utils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open a file using windows file associations — file_utils","text":"open_file alternative shell.exec() can take take multiple files. list_files list_dirs mostly wrappers fs::dir_ls() preferred defaults pattern searching full file path. file_open simply alias.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fizzbuzz.html","id":null,"dir":"Reference","previous_headings":"","what":"Fizz Buzz — fizzbuzz","title":"Fizz Buzz — fizzbuzz","text":"someone asked something done , can argue quickest way just take work someone else utilize .  reason reinvent wheel.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fizzbuzz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fizz Buzz — fizzbuzz","text":"","code":"fizzbuzz(n, show_numbers = TRUE)  fizzbuzz_lazy(n)  .fizzbuzz_vector"},{"path":"https://jmbarbone.github.io/mark/reference/fizzbuzz.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fizz Buzz — fizzbuzz","text":"object class character length 1000000.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fizzbuzz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fizz Buzz — fizzbuzz","text":"n number numbers show_numbers TRUE shows ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fizzbuzz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fizz Buzz — fizzbuzz","text":"character vector 1, 2, Fizz, 3, Buzz, etc","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fizzbuzz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fizz Buzz — fizzbuzz","text":"Multiples 3 shown \"Fizz\"; multiples 5 \"Buzz\"; multiple (.e., 15) \"FizzBuzz\". fizzbuzz_lazy() subsets .fizzbuzz_vector object, solution default parameters 1e6","code":""},{"path":"https://jmbarbone.github.io/mark/reference/fizzbuzz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fizz Buzz — fizzbuzz","text":"","code":"fizzbuzz(15) #>  [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"     #>  [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"     #> [13] \"13\"       \"14\"       \"FizzBuzz\" fizzbuzz(30, show_numbers = FALSE) #>  [1] \"\"         \"\"         \"Fizz\"     \"\"         \"Buzz\"     \"Fizz\"     #>  [7] \"\"         \"\"         \"Fizz\"     \"Buzz\"     \"\"         \"Fizz\"     #> [13] \"\"         \"\"         \"FizzBuzz\" \"\"         \"\"         \"Fizz\"     #> [19] \"\"         \"Buzz\"     \"Fizz\"     \"\"         \"\"         \"Fizz\"     #> [25] \"Buzz\"     \"\"         \"Fizz\"     \"\"         \"\"         \"FizzBuzz\" cat(fizzbuzz(30), sep = \"\\n\") #> 1 #> 2 #> Fizz #> 4 #> Buzz #> Fizz #> 7 #> 8 #> Fizz #> Buzz #> 11 #> Fizz #> 13 #> 14 #> FizzBuzz #> 16 #> 17 #> Fizz #> 19 #> Buzz #> Fizz #> 22 #> 23 #> Fizz #> Buzz #> 26 #> Fizz #> 28 #> 29 #> FizzBuzz  # \\donttest{ # show them how fast your solution is: if (package_available(\"bench\")) {   bench::mark(fizzbuzz(1e5), fizzbuzz_lazy(1e5)) } #> # A tibble: 2 × 13 #>   expression     min  median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time #>   <bch:expr> <bch:t> <bch:t>     <dbl> <bch:byt>    <dbl> <int> <dbl>   <bch:tm> #> 1 fizzbuzz(…  35.2ms  36.2ms      27.1    5.19MB     4.92    11     2      406ms #> 2 fizzbuzz_… 586.7µs 601.5µs    1639.    38.21MB    56.8    433    15      264ms #> # ℹ 4 more variables: result <list>, memory <list>, time <list>, gc <list> # }"},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_max_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recent directory by number name — get_dir_max_number","title":"Get recent directory by number name — get_dir_max_number","text":"Finds directory number greatest.  can useful folders created run IDs.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_max_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recent directory by number name — get_dir_max_number","text":"","code":"get_dir_max_number(x)"},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_max_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recent directory by number name — get_dir_max_number","text":"x directory look ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_max_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recent directory by number name — get_dir_max_number","text":"full path directory","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_recent_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recent directory by date — get_dir_recent_date","title":"Get recent directory by date — get_dir_recent_date","text":"Looks directories assumes date","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_recent_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recent directory by date — get_dir_recent_date","text":"","code":"get_dir_recent_date(x = \".\", dt_pattern = NULL, dt_format = NULL, all = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_recent_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recent directory by date — get_dir_recent_date","text":"x directory dt_pattern pattern passed filter directory dt_format One formats try Logical, TRUE recursively search directories","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_dir_recent_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recent directory by date — get_dir_recent_date","text":"full path directory","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recent directory — get_recent_dir","title":"Get recent directory — get_recent_dir","text":"Finds recent subdirectory directory.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recent directory — get_recent_dir","text":"","code":"get_recent_dir(x = \".\", ...)"},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recent directory — get_recent_dir","text":"x root directory ... Additional arguments passed list_dirs()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recent directory — get_recent_dir","text":"full path recent directory","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recent file — get_recent_file","title":"Get recent file — get_recent_file","text":"function can detect recent file directory.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recent file — get_recent_file","text":"","code":"get_recent_file(x, exclude_temp = TRUE, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recent file — get_recent_file","text":"x directory search file exclude_temp Logical, TRUE tries remove temp Windows files ... Additional arguments passed list_files()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_recent_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recent file — get_recent_file","text":"full name recent file stated directory","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and bump version — get_version","title":"Get and bump version — get_version","text":"read DESCRIPTION file get adjust version bump_date_version() check version actually date.  current version today's date(equal character strings) append .1.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and bump version — get_version","text":"","code":"get_version()  bump_version(version = NULL)  bump_date_version(version = NULL)  update_version(version = NULL, date = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/get_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and bump version — get_version","text":"version new version added; default NULL automatically update. date TRUE use date version.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and bump version — get_version","text":"get_version(): package_version bump_version(): None, called side-effects bump_date_version(): None, called side-effects update_version(): None, called side-effects","code":""},{"path":"https://jmbarbone.github.io/mark/reference/get_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and bump version — get_version","text":"Get bump package version dates","code":""},{"path":"https://jmbarbone.github.io/mark/reference/glob.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildcard globbing — glob","title":"Wildcard globbing — glob","text":"Helper function globbing character vectors","code":""},{"path":"https://jmbarbone.github.io/mark/reference/glob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildcard globbing — glob","text":"","code":"glob(x, pattern = NULL, value = TRUE, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/glob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wildcard globbing — glob","text":"x vector characters pattern Wildcard globbing pattern value, ... Additional parameters passed grep. Note: value default TRUE; NA, ... passed grepl.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/glob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wildcard globbing — glob","text":"","code":"x <- c(\"apple\", \"banana\", \"peach\", \"pear\", \"orange\") glob(x, \"*e\") #> [1] \"apple\"  \"orange\" glob(x, \"pea*\", value = FALSE) #> [1] 3 4 glob(x, \"*an*\", value = NA) #> [1] FALSE  TRUE FALSE FALSE  TRUE  path <- system.file(\"R\", package = \"mark\") glob(list.files(path), \"r*\") #> character(0)"},{"path":"https://jmbarbone.github.io/mark/reference/handlers.html","id":null,"dir":"Reference","previous_headings":"","what":"Handlers — handlers","title":"Handlers — handlers","text":"Catch report handlers","code":""},{"path":"https://jmbarbone.github.io/mark/reference/handlers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handlers — handlers","text":"","code":"has_warning(x, FUN, ...)  has_error(x, FUN, ...)  has_message(x, FUN, ...)  get_warning(x, FUN, ..., .null = TRUE)  get_message(x, FUN, ..., .null = TRUE)  get_error(x, FUN, ..., .null = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/handlers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handlers — handlers","text":"x vector FUN function ... Additional params passed FUN .null Logical, FALSE drop NULL results (get_*())","code":""},{"path":"https://jmbarbone.github.io/mark/reference/handlers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handlers — handlers","text":"has_*() functions return TRUE/FALSE handler found execution code. get_*() functions provide text message","code":""},{"path":"https://jmbarbone.github.io/mark/reference/handlers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handlers — handlers","text":"functions can used catch whether evaluation return error warning without raising.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/handlers.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Handlers — handlers","text":"Function catching adapted https://stackoverflow.com//4952908/12126576","code":""},{"path":"https://jmbarbone.github.io/mark/reference/handlers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handlers — handlers","text":"","code":"has_warning(c(1, \"no\"), as.integer) #>     1    no  #> FALSE  TRUE  #     1    no # FALSE  TRUE  get_warning(c(1, \"no\"), as.integer) #> $`1` #> NULL #>  #> $no #> [1] \"NAs introduced by coercion\" #>   # drop NULLs get_warning(c(1, \"no\"), as.integer, .null = FALSE) #> $no #> [1] \"NAs introduced by coercion\" #>   foo <- function(x) {   stopifnot(x > 0)   x }  has_error(c(1, 0, 2), foo) #>     1     0     2  #> FALSE  TRUE FALSE  #     1     0     2 # FALSE  TRUE FALSE  get_error(c(1, 0, 2), foo) #> $`1` #> NULL #>  #> $`0` #> [1] \"x > 0 is not TRUE\" #>  #> $`2` #> NULL #>   # drop NULLs get_error(c(1, 0, 2), foo, .null = FALSE) #> $`0` #> [1] \"x > 0 is not TRUE\" #>"},{"path":"https://jmbarbone.github.io/mark/reference/import.html","id":null,"dir":"Reference","previous_headings":"","what":"Import — import","title":"Import — import","text":"Import single function package","code":""},{"path":"https://jmbarbone.github.io/mark/reference/import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import — import","text":"","code":"import(pkg, fun, overwrite = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import — import","text":"pkg String, name package fun String, fun name function overwrite Logical, TRUE fun also found current environment, overwrite assignment","code":""},{"path":"https://jmbarbone.github.io/mark/reference/import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import — import","text":"None, called side effects","code":""},{"path":"https://jmbarbone.github.io/mark/reference/import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import — import","text":"","code":"# assigns `add` -- test with caution import(\"magrittr\", \"add\")"},{"path":"https://jmbarbone.github.io/mark/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert — insert","title":"Insert — insert","text":"Insert values position","code":""},{"path":"https://jmbarbone.github.io/mark/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert — insert","text":"","code":"insert(x, positions, values)"},{"path":"https://jmbarbone.github.io/mark/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert — insert","text":"x vector values positions Integer positions x insert values values vector values insert x","code":""},{"path":"https://jmbarbone.github.io/mark/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert — insert","text":"vector intended values inserted","code":""},{"path":"https://jmbarbone.github.io/mark/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert — insert","text":"","code":"insert(letters[1:5], c(2, 4), c(\"X\", \"Y\")) #> [1] \"a\" \"X\" \"b\" \"c\" \"Y\" \"d\" \"e\""},{"path":"https://jmbarbone.github.io/mark/reference/is_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Is File/Directory — is_dir","title":"Is File/Directory — is_dir","text":"path file/directory?","code":""},{"path":"https://jmbarbone.github.io/mark/reference/is_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is File/Directory — is_dir","text":"","code":"is_dir(x)  is_file(x)"},{"path":"https://jmbarbone.github.io/mark/reference/is_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is File/Directory — is_dir","text":"x vector file paths","code":""},{"path":"https://jmbarbone.github.io/mark/reference/is_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is File/Directory — is_dir","text":"logical vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/is_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is File/Directory — is_dir","text":"essentially taken utils::file_test() op = '-d' op = -f separated.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataframe labels — labels","title":"Dataframe labels — labels","text":"Assign labels vector data.frame.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataframe labels — labels","text":"","code":"assign_labels(x, ...)  # Default S3 method assign_labels(x, label, ...)  # S3 method for class 'data.frame' assign_labels(   x,   ...,   .missing = c(\"error\", \"warn\", \"skip\"),   .ls = rlang::list2(...) )  get_labels(x)  # Default S3 method get_labels(x)  # S3 method for class 'data.frame' get_labels(x)  view_labels(x, title)  remove_labels(x, ...)  # Default S3 method remove_labels(x, ...)  # S3 method for class 'data.frame' remove_labels(x, cols, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataframe labels — labels","text":"x vector data.frame ... One unquoted expressed separated commas.  assigning data.frame, ... can replaced data.frame first column targeted colname second desired label. label single length string label assigned .missing control setting dealing missing columns list; can set error stop() call, warn provide warning, skip silently skip labels. .ls named list columns labels set ... empty title Title viewer window – supplemented show paste0(.character(substitute(x)), \" - Labels\") cols character vector column names; missing remove label attribute across columns","code":""},{"path":"https://jmbarbone.github.io/mark/reference/labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dataframe labels — labels","text":"labelled vector data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataframe labels — labels","text":"labels assigned data.frame can make viewing object (View() inside Rstudio).  view_labels() call View() inside retrieve labels show viewer data.frame.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataframe labels — labels","text":"","code":"labs <- assign_labels(   iris,   Sepal.Length = \"cms\",   Sepal.Width  = \"cms\",   Petal.Length = \"cms\",   Petal.Width  = \"cms\",   Species      = \"Iris ...\" )  labs$dummy <- \"\" get_labels(labs) # shows label as <NA> for dummy column #>         column    label #> 1 Sepal.Length      cms #> 2  Sepal.Width      cms #> 3 Petal.Length      cms #> 4  Petal.Width      cms #> 5      Species Iris ... #> 6        dummy     <NA>  labs0 <- remove_labels(labs, c(\"Sepal.Length\", \"Sepal.Width\")) get_labels(labs0) # No labels for Sepal.Length and Sepal.Width #>         column    label #> 1 Sepal.Length     <NA> #> 2  Sepal.Width     <NA> #> 3 Petal.Length      cms #> 4  Petal.Width      cms #> 5      Species Iris ... #> 6        dummy     <NA>"},{"path":"https://jmbarbone.github.io/mark/reference/limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit — limit","title":"Limit — limit","text":"Limit numeric vector lower upper bounds","code":""},{"path":"https://jmbarbone.github.io/mark/reference/limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit — limit","text":"","code":"limit(x, lower = min(x), upper = max(x))"},{"path":"https://jmbarbone.github.io/mark/reference/limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit — limit","text":"x numeric vector lower lower limit (x < lower) upper upper limit (x > higher)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/limit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit — limit","text":"vector x lower upper minimum, maximum values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/lines_of_r_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Lines of R code — lines_of_r_code","title":"Lines of R code — lines_of_r_code","text":"Find total number lines R code","code":""},{"path":"https://jmbarbone.github.io/mark/reference/lines_of_r_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lines of R code — lines_of_r_code","text":"","code":"lines_of_r_code(x = \".\", skip_empty = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/lines_of_r_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lines of R code — lines_of_r_code","text":"x Directory search files skip_empty Logical, TRUE count lines empty contain bracket quotation mark.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/lines_of_r_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lines of R code — lines_of_r_code","text":"integer number lines applicable files","code":""},{"path":"https://jmbarbone.github.io/mark/reference/lines_of_r_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lines of R code — lines_of_r_code","text":"Tries read file directory ends .R .r sums together.  Files fail read counted.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/lines_of_r_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lines of R code — lines_of_r_code","text":"","code":"# \\donttest{ lines_of_r_code(system.file()) #> [1] 292 lines_of_r_code(system.file(), skip_empty = FALSE) #> [1] 376 # }"},{"path":"https://jmbarbone.github.io/mark/reference/list2df.html","id":null,"dir":"Reference","previous_headings":"","what":"List to data.frame — list2df","title":"List to data.frame — list2df","text":"Converts list object data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/list2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List to data.frame — list2df","text":"","code":"list2df(x, name = \"name\", value = \"value\", show_NA, warn = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/list2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List to data.frame — list2df","text":"x (preferably) named list number values name, value Names new key value columns, respectively show_NA Ignored; set trigger warning warn Logical; TRUE show warning ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/list2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List to data.frame — list2df","text":"data.frame object columns \"name\" \"value\" names list values ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/list2df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List to data.frame — list2df","text":"Unlike base::list2DF(), list2df() tries format data.frame using names list values rather variables.  creates longer form list may tidy.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/list2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List to data.frame — list2df","text":"","code":"x <- list(a = 1, b = 2:4, c = letters[10:20], \"unnamed\", \"unnamed2\") list2df(x, \"col1\", \"col2\", warn = FALSE) #>    col1     col2 #> 1     a        1 #> 2     b        2 #> 3     b        3 #> 4     b        4 #> 5     c        j #> 6     c        k #> 7     c        l #> 8     c        m #> 9     c        n #> 10    c        o #> 11    c        p #> 12    c        q #> 13    c        r #> 14    c        s #> 15    c        t #> 16    4  unnamed #> 17    5 unnamed2  if (getRversion() >= as.package_version('4.0')) { # contrast with `base::list2DF()` and `base::as.data.frame()`   x <- list(a = 1:3, b = 2:4, c = letters[10:12])   list2df(x, warn = FALSE)   list2DF(x)   as.data.frame(x) } #>   a b c #> 1 1 2 j #> 2 2 3 k #> 3 3 4 l"},{"path":"https://jmbarbone.github.io/mark/reference/list_environments.html","id":null,"dir":"Reference","previous_headings":"","what":"List all environments and objects — list_environments","title":"List all environments and objects — list_environments","text":"Functions list environments objects","code":""},{"path":"https://jmbarbone.github.io/mark/reference/list_environments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all environments and objects — list_environments","text":"","code":"environments()  ls_all(all.names = FALSE)  objects_all(all.names = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/list_environments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all environments and objects — list_environments","text":".names logical value.  TRUE,     object names returned.  FALSE, names begin     . omitted.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/list_environments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all environments and objects — list_environments","text":"environments(): Invisibly, character vector environment names ls_all(), objects_all(): named list environments search() path objects found environment","code":""},{"path":"https://jmbarbone.github.io/mark/reference/list_environments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List all environments and objects — list_environments","text":"environments() basically printing wrapper base::search() ls_all() objects_all() can used retrieved objects environments search() path, may print large result console.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/logic_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Logic - Extension' — logic_ext","title":"Logic - Extension' — logic_ext","text":"functions take logical logical-like (.e., 1, 0, NA integer doubles) return logical values. Extensions base logical operations account NA values. base::isTRUE() base::isFALSE() return single length TRUE FALSE checks valid lengths evaluation.  needing check vector presence TRUE FALSE held back NA values, is_true is_false always provide TRUE FALSE vector logical return NA vector x logical. %% just wrapper base::xor()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/logic_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logic - Extension' — logic_ext","text":"","code":"is_true(x)  # Default S3 method is_true(x)  # S3 method for class 'logical' is_true(x)  is_false(x)  # Default S3 method is_false(x)  # S3 method for class 'logical' is_false(x)  x %xor% y  OR(..., na.rm = FALSE)  AND(..., na.rm = FALSE)  either(x, y)  is_boolean(x)  none(..., na.rm = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/logic_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logic - Extension' — logic_ext","text":"x, y vector logical values.  NULL generate warning. logical value, return NA equal vector length ... Vectors list logical values na.rm Logical, TRUE ignore NA","code":""},{"path":"https://jmbarbone.github.io/mark/reference/logic_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logic - Extension' — logic_ext","text":"is_true(), is_false(), either(), %%, (), (): logical vector, equal length x (y ... lengths) is_boolean(): TRUE FALSE none(): TRUE, FALSE, NA","code":""},{"path":"https://jmbarbone.github.io/mark/reference/logic_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logic - Extension' — logic_ext","text":"Logical operations, extended","code":""},{"path":"https://jmbarbone.github.io/mark/reference/logic_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logic - Extension' — logic_ext","text":"","code":"x <- c(TRUE, FALSE, NA) y <- c(FALSE, FALSE, TRUE) z <- c(TRUE, NA, TRUE) isTRUE(x) #> [1] FALSE is_true(x) #> [1]  TRUE FALSE FALSE isFALSE(x) #> [1] FALSE is_false(x) #> [1] FALSE  TRUE FALSE x %xor% TRUE #> [1] FALSE  TRUE    NA TRUE %xor% TRUE #> [1] FALSE TRUE %xor% FALSE #> [1] TRUE NA %xor% FALSE #> [1] NA OR(x, y, z) #> [1] TRUE   NA TRUE OR(x, y, z, na.rm = TRUE) #> [1]  TRUE FALSE  TRUE AND(x, y, z) #> [1] FALSE FALSE    NA AND(x, y, z, na.rm = TRUE) #> [1] FALSE FALSE  TRUE either(x, FALSE) #> [1]  TRUE FALSE FALSE either(TRUE, FALSE) #> [1] TRUE either(FALSE, NA) #> [1] FALSE either(TRUE, NA) #> [1] TRUE none(x) #> [1] FALSE none(x & y, na.rm = TRUE) #> [1] TRUE is_boolean(x) #> [1] TRUE is_boolean(c(1L, NA_integer_, 0L)) #> [1] TRUE is_boolean(c(1.01, 0, -1)) #> [1] FALSE"},{"path":"https://jmbarbone.github.io/mark/reference/ls_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"List Objects - extensions — ls_ext","title":"List Objects - extensions — ls_ext","text":"List Objects - extensions","code":""},{"path":"https://jmbarbone.github.io/mark/reference/ls_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Objects - extensions — ls_ext","text":"","code":"ls_dataframe(pattern, all.names = FALSE, envir = parent.frame())  ls_function(pattern, all.names = FALSE, envir = parent.frame())  ls_object(pattern, all.names = FALSE, envir = parent.frame())"},{"path":"https://jmbarbone.github.io/mark/reference/ls_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Objects - extensions — ls_ext","text":"pattern optional regular expression.  names     matching pattern returned.  glob2rx can     used convert wildcard patterns regular expressions. .names logical value.  TRUE,     object names returned.  FALSE, names begin     . omitted. envir alternative argument name specifying     environment.  Mostly back compatibility.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/ls_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Objects - extensions — ls_ext","text":"character vector names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/make_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Make system file function — make_sf","title":"Make system file function — make_sf","text":"Simple wrapper package specific function internal packages.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/make_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make system file function — make_sf","text":"","code":"make_sf(package)"},{"path":"https://jmbarbone.github.io/mark/reference/make_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make system file function — make_sf","text":"package name package","code":""},{"path":"https://jmbarbone.github.io/mark/reference/make_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make system file function — make_sf","text":"function wrapping system.file() always use package name provided package","code":""},{"path":"https://jmbarbone.github.io/mark/reference/make_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make system file function — make_sf","text":"","code":"make_sf(\"mark\")() #> [1] \"/home/runner/work/_temp/Library/mark\""},{"path":"https://jmbarbone.github.io/mark/reference/mark.html","id":null,"dir":"Reference","previous_headings":"","what":"mark — mark","title":"mark — mark","text":"Miscellaneous, Analytic R Kernels","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/mark.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mark — mark","text":"Maintainer: Jordan Mark Barbone jmbarbone@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://jmbarbone.github.io/mark/reference/match_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Match arguments — match_arg","title":"Match arguments — match_arg","text":"function essentially clear version base::match.arg() produces cleaner warning message restrict table param character vectors .","code":""},{"path":"https://jmbarbone.github.io/mark/reference/match_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match arguments — match_arg","text":"","code":"match_arg(x, table)"},{"path":"https://jmbarbone.github.io/mark/reference/match_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match arguments — match_arg","text":"x argument table table choices","code":""},{"path":"https://jmbarbone.github.io/mark/reference/match_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match arguments — match_arg","text":"single value x matched table","code":""},{"path":"https://jmbarbone.github.io/mark/reference/match_arg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match arguments — match_arg","text":"Match arguments","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/match_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match arguments — match_arg","text":"","code":"x <- c(\"apple\", \"banana\", \"orange\") match_arg(\"b\", x) #> [1] \"banana\"  # Produces error try(match_arg(\"pear\", x)) #> Error : <condMatchArgError> pear : 'pear' did not match of of the following: #>    'apple', 'banana', 'orange' #> package:mark  foo <- function(x, op = c(1, 2, 3)) {   op <- match_arg(op)   x / op }  foo(10, 3) #> [1] 3.333333  # Error try(foo(1, 0)) #> Error : <condMatchArgError> op : '0' did not match of of the following: #>    '1', '2', '3' #> package:mark"},{"path":"https://jmbarbone.github.io/mark/reference/match_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Match params — match_param","title":"Match params — match_param","text":"Much like base::match.arg() key differences: perform partial matching return error messages ugly quotation marks","code":""},{"path":"https://jmbarbone.github.io/mark/reference/match_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match params — match_param","text":"","code":"match_param(   param,   choices,   null = TRUE,   partial = getOption(\"mark.match_param.partial\", FALSE),   multiple = FALSE,   simplify = TRUE )"},{"path":"https://jmbarbone.github.io/mark/reference/match_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match params — match_param","text":"param parameter choices available choices; named lists return name (character) matched value within list element.  list formula objects (preferred) retains LHS formula return value matched RHS formula. null TRUE allows NULL passed param partial TRUE allows partial matching via pmatch() multiple TRUE allows multiple values returned simplify TRUE simplify output single value","code":""},{"path":"https://jmbarbone.github.io/mark/reference/match_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match params — match_param","text":"single value param matched choices","code":""},{"path":"https://jmbarbone.github.io/mark/reference/match_param.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match params — match_param","text":"Param matching argument","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/match_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match params — match_param","text":"","code":"fruits <- function(x = c(\"apple\", \"banana\", \"orange\")) {   match_param(x) }  fruits()         # apple #> [1] \"apple\" try(fruits(\"b\")) # must be exact fruits(\"banana\") #> Error : <matchParamMatchError> `match_param(x)` failed in `fruits(\"b\")`: #>   param    b #>   choices  apple, banana, orange #> package:mark  pfruits <- function(x = c(\"apple\", \"apricot\", \"banana\")) {   match_param(x, partial = TRUE) } pfruits()          # apple #> [1] \"apple\" try(pfruits(\"ap\")) # matchParamMatchError #> Error : <matchParamMatchError> `match_param(x)` failed in `pfruits(\"ap\")`: #>   param    ap #>   choices  apple, apricot, banana #> package:mark pfruits(\"app\")     # apple #> [1] \"apple\"  afruits <- function(x = c(\"apple\", \"banana\", \"orange\")) {   match_param(x, multiple = TRUE) }  afruits() # apple, banana, orange #> [1] \"apple\"  \"banana\" \"orange\"  # can have multiple responses how_much <- function(x = list(too_few = 0:2, ok = 3:5, too_many = 6:10)) {   match_param(x) }  how_much(1) #> [1] \"too_few\" how_much(3) #> [1] \"ok\" how_much(9) #> [1] \"too_many\"  # use a list of formulas instead ls <- list(1L ~ 0:1, 2L, 3L ~ 3:5) sapply(0:5, match_param, choices = ls) #> [1] 1 1 2 3 3 3"},{"path":"https://jmbarbone.github.io/mark/reference/md5.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the MD5 hash of an object — md5","title":"Compute the MD5 hash of an object — md5","text":"Wrapper calling tools::md5sum() objects rather files.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/md5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the MD5 hash of an object — md5","text":"","code":"md5(x)"},{"path":"https://jmbarbone.github.io/mark/reference/md5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the MD5 hash of an object — md5","text":"x object","code":""},{"path":"https://jmbarbone.github.io/mark/reference/md5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the MD5 hash of an object — md5","text":"md5sum object","code":""},{"path":"https://jmbarbone.github.io/mark/reference/md5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the MD5 hash of an object — md5","text":"x objects serialized temporary file tools::md5sum() called.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/md5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the MD5 hash of an object — md5","text":"","code":"md5(\"hello\") #> 7febcebc923f8ecff5050b81e1b83739 md5(1:10) #> 85b427e34f04222ce12bd454bf92c32b md5(data.frame(a = 1:10, b = letters[1:10])) #> e55134797dbabb10327403843b840d6f"},{"path":"https://jmbarbone.github.io/mark/reference/median2.html","id":null,"dir":"Reference","previous_headings":"","what":"Median (Q 50) — median2","title":"Median (Q 50) — median2","text":"Median 50th quantile option select quantile algorithm","code":""},{"path":"https://jmbarbone.github.io/mark/reference/median2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median (Q 50) — median2","text":"","code":"median2(x, type = 7, na.rm = FALSE)  q50(x, type = 7, na.rm = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/median2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median (Q 50) — median2","text":"x numeric vector whose sample quantiles wanted,     object class method defined (see also     ‘details’). NA NaN values     allowed numeric vectors unless na.rm TRUE. type integer 1 9 selecting one     nine quantile algorithms detailed used. na.rm logical; true, NA NaN's     removed x quantiles computed.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/median2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median (Q 50) — median2","text":"See stats::quantile()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/median2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Median (Q 50) — median2","text":"q50 alias median2","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/median2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median (Q 50) — median2","text":"","code":"set.seed(42) x <- rnorm(100) median(x)            # 0.08979677 #> [1] 0.08979677 median2(x, type = 7) # 0.08979677 - default type is 7 #> [1] 0.08979677 median2(x, type = 3) # 0.08976065 #> [1] 0.08976065"},{"path":"https://jmbarbone.github.io/mark/reference/merge_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge lists — merge_list","title":"Merge lists — merge_list","text":"Merge lists different intersecting names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/merge_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge lists — merge_list","text":"","code":"merge_list(x, y, keep = c(\"x\", \"y\"), null = c(\"ignore\", \"drop\", \"keep\")[1:2])"},{"path":"https://jmbarbone.github.io/mark/reference/merge_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge lists — merge_list","text":"x, y Lists merge keep matching names found, object values retained; \"x\" retains values x, \"y\" retains values y. null Method handling NULL values.  two values passed, applied x y respectively.  single value passed, applied x y. \"ignore\": NULL values ignored.  passes x, NULL values retained overridden y. \"drop\": NULL values dropped merge appear output. \"keep\": NULL values retained output can override values.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/merge_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge lists — merge_list","text":"","code":"x <- list(a = 1, b = 2,    c = NULL, d = NULL) y <- list(a = 2, b = NULL, c = 3)  # compared to: utils::modifyList(x, y) #> $a #> [1] 2 #>  #> $c #> [1] 3 #>  #> $d #> NULL #>  utils::modifyList(x, y, keep.null = TRUE) #> $a #> [1] 2 #>  #> $b #> NULL #>  #> $c #> [1] 3 #>  #> $d #> NULL #>   merge_list(x, y) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> $d #> NULL #>  merge_list(x, y, keep = \"y\") #> $a #> [1] 2 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> $d #> NULL #>  merge_list(x, y, null = \"drop\") #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>"},{"path":"https://jmbarbone.github.io/mark/reference/multi_grepl.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple searching — multi_grepl","title":"Multiple searching — multi_grepl","text":"Multiple search pattern searches","code":""},{"path":"https://jmbarbone.github.io/mark/reference/multi_grepl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple searching — multi_grepl","text":"","code":"multi_grepl(x, patterns, ..., simplify = TRUE)  multi_grep(x, patterns, ..., simplify = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/multi_grepl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple searching — multi_grepl","text":"x Passed base::grepl() patterns list vector patterns search across x; named value returned name pattern – otherwise position. Pattern match reported first list found ... Additional arguments passed base::grepl() simplify FALSE return list matches, otherwise first match found","code":""},{"path":"https://jmbarbone.github.io/mark/reference/multi_grepl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple searching — multi_grepl","text":"name position pattern matched","code":""},{"path":"https://jmbarbone.github.io/mark/reference/multi_grepl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple searching — multi_grepl","text":"","code":"x <- c(\"apple\", \"banana\", \"lemon\") multi_grepl(x, c(\"a\" = \"^[ab]\", \"b\" = \"lem\")) #> [1] \"a\" \"a\" \"b\" multi_grepl(x, c(\"a\" = \"^[ab]\", \"b\" = \"q\"))                   # lemon not matches on either #> [1] \"a\" \"a\" NA  multi_grepl(x, c(\"a\" = \"^[ab]\", \"b\" = \"e\"))                   # apple matches \"a\" before \"b\" #> [1] \"a\" \"a\" \"b\" multi_grepl(x, c(\"a\" = \"^[ab]\", \"b\" = \"e\"), simplify = FALSE) # shows all matches #> [[1]] #> [1] \"a\" \"b\" #>  #> [[2]] #> [1] \"a\" #>  #> [[3]] #> [1] \"b\" #>  multi_grepl(x, c(\"^[ab]\", \"e\"))                               # returned as positions #> [1] 1 1 2 multi_grepl(x, c(\"^[ab]\", \"e\"), simplify = FALSE) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 #>  #> [[3]] #> [1] 2 #>"},{"path":"https://jmbarbone.github.io/mark/reference/na_assignments.html","id":null,"dir":"Reference","previous_headings":"","what":"NA at positions — na_assignments","title":"NA at positions — na_assignments","text":"Converts select elements vector NAs end results NA_at NA_if require suitable index value (x[y] <- NA) NA_at expects y (result function y) integers NA_if expects y (result function y) logical NA_in NA_out expect values match NA_in checks x[x %% y] <- NA NA_out checks x[x %% y] <- NA (see fuj::match_ext)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/na_assignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NA at positions — na_assignments","text":"","code":"NA_at(x, y, ...)  NA_if(x, y, ...)  NA_in(x, y, ...)  NA_out(x, y, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/na_assignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NA at positions — na_assignments","text":"x vector values y Either suitable value (see Details) function accepts x first parameter can return suitable values ... Additional values passed y (y function)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/na_assignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NA at positions — na_assignments","text":"x assigned NA values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/na_assignments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NA at positions — na_assignments","text":"Convert specific values NA","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/na_assignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NA at positions — na_assignments","text":"","code":"let <- ordered(letters[1:5]) NA_at(let, c(1, 3, 5))   # [1] <NA> b    <NA> d    <NA> #> [1] <NA> b    <NA> d    <NA> #> Levels: a < b < c < d < e NA_if(let, let <= \"b\")   # [1] <NA> <NA> c    d    e #> [1] <NA> <NA> c    d    e    #> Levels: a < b < c < d < e NA_in(let, c(\"a\", \"c\"))  # [1] <NA> b    <NA> d    e #> [1] <NA> b    <NA> d    e    #> Levels: a < b < c < d < e NA_out(let, c(\"a\", \"c\")) # [1] a    <NA> c    <NA> <NA> #> [1] a    <NA> c    <NA> <NA> #> Levels: a < b < c < d < e"},{"path":"https://jmbarbone.github.io/mark/reference/na_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Selecting NA columns — na_cols","title":"Selecting NA columns — na_cols","text":"Select remove columns entirely NA","code":""},{"path":"https://jmbarbone.github.io/mark/reference/na_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selecting NA columns — na_cols","text":"","code":"select_na_cols(x)  remove_na_cols(x)  is_na_cols(x, names = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/na_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selecting NA columns — na_cols","text":"x data.frame names Logical, TRUE (default) return column names names vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/na_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selecting NA columns — na_cols","text":"select_na_cols() x columns NA remove_na_cols() x without columns NA is_na_cols() logical vector: TRUE rows column NA, otherwise FALSE","code":""},{"path":"https://jmbarbone.github.io/mark/reference/norm_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize paths — norm_path","title":"Normalize paths — norm_path","text":"Normalize check vector paths","code":""},{"path":"https://jmbarbone.github.io/mark/reference/norm_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize paths — norm_path","text":"","code":"norm_path(x = \".\", check = FALSE, remove = check)  file_path(..., check = FALSE, remove = check)  user_file(..., check = FALSE, remove = check)"},{"path":"https://jmbarbone.github.io/mark/reference/norm_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize paths — norm_path","text":"x character vector paths check Logical, TRUE check path exists output warning . remove Logical, TRUE remove paths found ... Character vectors creating path","code":""},{"path":"https://jmbarbone.github.io/mark/reference/norm_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize paths — norm_path","text":"vector full file paths","code":""},{"path":"https://jmbarbone.github.io/mark/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize values — normalize","title":"Normalize values — normalize","text":"Normalizes values based possible range new bounds","code":""},{"path":"https://jmbarbone.github.io/mark/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize values — normalize","text":"","code":"normalize(x, ...)  # Default S3 method normalize(x, range = base::range(x, na.rm = TRUE), bounds = 0:1, ...)  # S3 method for class 'data.frame' normalize(x, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize values — normalize","text":"x object (coercible ) double; data.frames transformed ... Additional arguments passed methods range range possible values x.  See details info. Defaults range non-NA values bounds new boundaries normalized values x. Defaults 0 1.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize values — normalize","text":"x transformed values range values transformed bounds.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize values — normalize","text":"Parameters range bounds modified base::range(). largest smallest values used determine minimum/maximum values lower/upper bounds.  allows vector two values passed. current implementation normalize.data.frame() allows list parameters passed column.  However, probably best suited default values.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize values — normalize","text":"","code":"x <- c(0.23, 0.32, 0.12, 0.61, 0.26, 0.24, 0.23, 0.32, 0.29, 0.27) data.frame(   x  = normalize(x),   v  = normalize(x, range = 0:2),   b  = normalize(x, bounds = 0:10),   vb = normalize(x, range = 0:2, bounds = 0:10) ) #>            x     v         b   vb #> 1  0.2244898 0.115  2.244898 1.15 #> 2  0.4081633 0.160  4.081633 1.60 #> 3  0.0000000 0.060  0.000000 0.60 #> 4  1.0000000 0.305 10.000000 3.05 #> 5  0.2857143 0.130  2.857143 1.30 #> 6  0.2448980 0.120  2.448980 1.20 #> 7  0.2244898 0.115  2.244898 1.15 #> 8  0.4081633 0.160  4.081633 1.60 #> 9  0.3469388 0.145  3.469388 1.45 #> 10 0.3061224 0.135  3.061224 1.35  # maintains matrix mat <- structure(c(0.24, 0.92, 0.05, 0.37, 0.19, 0.69, 0.43, 0.22, 0.85, 0.73, 0.89, 0.68, 0.57, 0.89, 0.61, 0.98, 0.75, 0.37, 0.24, 0.24, 0.34, 0.8, 0.25, 0.46, 0.03, 0.71, 0.79, 0.56, 0.83, 0.97), dim = c(10L, 3L))  mat #>       [,1] [,2] [,3] #>  [1,] 0.24 0.89 0.34 #>  [2,] 0.92 0.68 0.80 #>  [3,] 0.05 0.57 0.25 #>  [4,] 0.37 0.89 0.46 #>  [5,] 0.19 0.61 0.03 #>  [6,] 0.69 0.98 0.71 #>  [7,] 0.43 0.75 0.79 #>  [8,] 0.22 0.37 0.56 #>  [9,] 0.85 0.24 0.83 #> [10,] 0.73 0.24 0.97 normalize(mat, bounds = -1:1) #>             [,1]       [,2]        [,3] #>  [1,] -0.5578947  0.8105263 -0.34736842 #>  [2,]  0.8736842  0.3684211  0.62105263 #>  [3,] -0.9578947  0.1368421 -0.53684211 #>  [4,] -0.2842105  0.8105263 -0.09473684 #>  [5,] -0.6631579  0.2210526 -1.00000000 #>  [6,]  0.3894737  1.0000000  0.43157895 #>  [7,] -0.1578947  0.5157895  0.60000000 #>  [8,] -0.6000000 -0.2842105  0.11578947 #>  [9,]  0.7263158 -0.5578947  0.68421053 #> [10,]  0.4736842 -0.5578947  0.97894737 normalize(as.data.frame(mat), bounds = -1:1) #>            V1         V2          V3 #> 1  -0.5632184  0.7567568 -0.34042553 #> 2   1.0000000  0.1891892  0.63829787 #> 3  -1.0000000 -0.1081081 -0.53191489 #> 4  -0.2643678  0.7567568 -0.08510638 #> 5  -0.6781609  0.0000000 -1.00000000 #> 6   0.4712644  1.0000000  0.44680851 #> 7  -0.1264368  0.3783784  0.61702128 #> 8  -0.6091954 -0.6486486  0.12765957 #> 9   0.8390805 -1.0000000  0.70212766 #> 10  0.5632184 -1.0000000  1.00000000"},{"path":"https://jmbarbone.github.io/mark/reference/not_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Make not available — not_available","title":"Make not available — not_available","text":"Create NA vectors","code":""},{"path":"https://jmbarbone.github.io/mark/reference/not_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make not available — not_available","text":"","code":"not_available(type = \"logical\", length = 0L)  set_not_available(type, value)  NA_Date_  NA_POSIXct_  NA_POSIXlt_"},{"path":"https://jmbarbone.github.io/mark/reference/not_available.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Make not available — not_available","text":"object class Date length 1. object class POSIXct (inherits POSIXt) length 1. object class POSIXlt (inherits POSIXt) length 1.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/not_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make not available — not_available","text":"type Type NA (see details) length Length vector value value return not_available()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/not_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make not available — not_available","text":"vector NA values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/not_available.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make not available — not_available","text":"length text search appropriate match.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/not_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make not available — not_available","text":"","code":"x <- not_available(\"Date\", 3) x #> [1] NA NA NA class(x) #> [1] \"Date\""},{"path":"https://jmbarbone.github.io/mark/reference/note.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a note to an object — note","title":"Append a note to an object — note","text":"alternative base::comment().","code":""},{"path":"https://jmbarbone.github.io/mark/reference/note.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a note to an object — note","text":"","code":"note(x) <- value  set_note(x, value)  note(x)"},{"path":"https://jmbarbone.github.io/mark/reference/note.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a note to an object — note","text":"x object value note attach; NULL remove note class noted object.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/note.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a note to an object — note","text":"note<-, set_note() return x (\"note\" attribute assigned) note() retrieve \"note\" attribute","code":""},{"path":"https://jmbarbone.github.io/mark/reference/note.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append a note to an object — note","text":"note assigned object new class added, note, print function can call S3 method.  print can adjusted width using option mark.note.width defaults option width set. type object assigned note restricted, user beware odd prints additional features added notes fun. assigning note (note<-, alias set_note()) noted class added object.  allows print.noted class dispatched note printed every time object called/printed next print method used.  However, called interactive()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/note.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a note to an object — note","text":"","code":"x <- c(\"x\", \"k\", \"c\", \"d\") comment(x) <- \"This is just a comment\" comment(x) #> [1] \"This is just a comment\"  # Comment is intentionally hidden x #> [1] \"x\" \"k\" \"c\" \"d\" note(x) <- \"Just some random letters\" note(x) #> [1] \"Just some random letters\"  # Note is now present every time x #> [1] \"x\" \"k\" \"c\" \"d\"  # Assigning `NULL` will remove note (and class) note(x) <- NULL note(x) # NULL #> NULL x       # No more note #> [1] \"x\" \"k\" \"c\" \"d\""},{"path":"https://jmbarbone.github.io/mark/reference/omit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Omit NA values — omit_na","title":"Omit NA values — omit_na","text":"Omit NA values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/omit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omit NA values — omit_na","text":"","code":"omit_na(x)"},{"path":"https://jmbarbone.github.io/mark/reference/omit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omit NA values — omit_na","text":"x vector values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/omit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omit NA values — omit_na","text":"x NA values removes two attributes integers: na position NA values, valid position non-NA values; empty positions reported integer(0)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/omit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omit NA values — omit_na","text":"","code":"# Like stats::na.omit but always provides x <- letters[1:5] omit_na(x) #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #> attr(,\"na\") #> integer(0) #> attr(,\"valid\") #> [1] 1 2 3 4 5 x[c(3, 5)] <- NA omit_na(x) #> [1] \"a\" \"b\" NA  \"d\" NA  #> attr(,\"na\") #> [1] 3 5 #> attr(,\"valid\") #> [1] 1 2 4"},{"path":"https://jmbarbone.github.io/mark/reference/package_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if package is available — package_available","title":"Check if package is available — package_available","text":"wrapped requireNamespace","code":""},{"path":"https://jmbarbone.github.io/mark/reference/package_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if package is available — package_available","text":"","code":"package_available(namespace)"},{"path":"https://jmbarbone.github.io/mark/reference/package_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if package is available — package_available","text":"namespace One packages require.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/package_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if package is available — package_available","text":"require_namespace(): None, called side effects package_available(): Visibly, TRUE FALSE","code":""},{"path":"https://jmbarbone.github.io/mark/reference/percentile_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentile rank — percentile_rank","title":"Percentile rank — percentile_rank","text":"bounds percentile rank > 0 < 1 (see Boundaries) percentile rank proportion scores less current score. $$PR = (c_L + 0.5 f_i) / N$$ \\(c_L\\) frequency scores less score interest \\(f_i\\) frequency score interest","code":""},{"path":"https://jmbarbone.github.io/mark/reference/percentile_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentile rank — percentile_rank","text":"","code":"percentile_rank(x, weights = times, times)"},{"path":"https://jmbarbone.github.io/mark/reference/percentile_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentile rank — percentile_rank","text":"x vector values rank weights, times vector number times repeat x","code":""},{"path":"https://jmbarbone.github.io/mark/reference/percentile_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentile rank — percentile_rank","text":"percentile rank x 0 1 (see Boundaries)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/percentile_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Percentile rank — percentile_rank","text":"Computes percentile rank score set.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/percentile_rank.html","id":"boundaries","dir":"Reference","previous_headings":"","what":"Boundaries","title":"Percentile rank — percentile_rank","text":"percentile rank score set must exclusively within boundaries 0 1, function may produce percentile rank exactly 0 1.  may occur number values large value within boundaries small differentiated. Additionally, using weights parameter, lowest highest number value 0, number theoretical 0 1, values actually within set.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/percentile_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentile rank — percentile_rank","text":"","code":"percentile_rank(0:9) #>    0    1    2    3    4    5    6    7    8    9  #> 0.05 0.15 0.25 0.35 0.45 0.55 0.65 0.75 0.85 0.95  x <- c(1, 2, 1, 7, 5, NA_integer_, 7, 10) percentile_rank(x) #>         1         2         1         7         5      <NA>         7        10  #> 0.1428571 0.3571429 0.1428571 0.7142857 0.5000000        NA 0.7142857 0.9285714   if (package_available(\"dplyr\")) {   dplyr::percent_rank(x) } #> [1] 0.0000000 0.3333333 0.0000000 0.6666667 0.5000000        NA 0.6666667 #> [8] 1.0000000  # with times percentile_rank(7:1, c(1, 0, 2, 2, 3, 1, 1)) #>    7    6    5    4    3    2    1  #> 0.95 0.90 0.80 0.60 0.35 0.15 0.05"},{"path":"https://jmbarbone.github.io/mark/reference/print.mark_bib_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print bib data frame — print.mark_bib_df","title":"Print bib data frame — print.mark_bib_df","text":"Print bib dataframe, list","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print.mark_bib_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print bib data frame — print.mark_bib_df","text":"","code":"# S3 method for class 'mark_bib_df' print(x, list = FALSE, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/print.mark_bib_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print bib data frame — print.mark_bib_df","text":"x mark_bib_df object list TRUE print list rather data.frame ... Additional arguments passed methods","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print.mark_bib_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print bib data frame — print.mark_bib_df","text":"x, invisibly, called side effects","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print.pseudo_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Print pseudo_id — print.pseudo_id","title":"Print pseudo_id — print.pseudo_id","text":"Print pseudo_id","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print.pseudo_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print pseudo_id — print.pseudo_id","text":"","code":"# S3 method for class 'pseudo_id' print(x, ..., all = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/print.pseudo_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print pseudo_id — print.pseudo_id","text":"x object class pseudo_id ... implemented TRUE print uniques.  recommend many uniques crowd console output","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print.pseudo_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print pseudo_id — print.pseudo_id","text":"x, invisibly.  Called side effects.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/print_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Print as c — print_c","title":"Print as c — print_c","text":"Prints vector paste R script","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print as c — print_c","text":"","code":"print_c(x = read_clipboard(), sorted = TRUE, null = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/print_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print as c — print_c","text":"x vector (defaults reading clipboard) sorted TRUE (default) applies sort() x null TRUE (default) adds NULL end c() print","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print as c — print_c","text":"Invisibly, character vector, object printed console","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print_c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print as c — print_c","text":"sorts (set) provides unique values element x prints call c.  can useful copying data want save vector R script. result called cat() well copied clipboard.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/print_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print as c — print_c","text":"","code":"print_c(1:10) #> c( #> 1, #> 2, #> 3, #> 4, #> 5, #> 6, #> 7, #> 8, #> 9, #> 10, #> NULL #> ) print_c(letters[1:3]) #> c( #> \"a\", #> \"b\", #> \"c\", #> NULL #> ) print_c(month.abb) #> c( #> \"Apr\", #> \"Aug\", #> \"Dec\", #> \"Feb\", #> \"Jan\", #> \"Jul\", #> \"Jun\", #> \"Mar\", #> \"May\", #> \"Nov\", #> \"Oct\", #> \"Sep\", #> NULL #> )"},{"path":"https://jmbarbone.github.io/mark/reference/process_bib_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Process bib values — process_bib_dataframe","title":"Process bib values — process_bib_dataframe","text":"Generates data frame values bibs","code":""},{"path":"https://jmbarbone.github.io/mark/reference/process_bib_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process bib values — process_bib_dataframe","text":"","code":"process_bib_dataframe(categories, values, fields, keys)"},{"path":"https://jmbarbone.github.io/mark/reference/process_bib_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process bib values — process_bib_dataframe","text":"categories list categories values list values fields Vector fields keys Vector keys","code":""},{"path":"https://jmbarbone.github.io/mark/reference/process_bib_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process bib values — process_bib_dataframe","text":"wide data.frame explicit NAs","code":""},{"path":"https://jmbarbone.github.io/mark/reference/pseudo_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an ID for a vector — pseudo_id","title":"Create an ID for a vector — pseudo_id","text":"Transforms vector integer IDs.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/pseudo_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an ID for a vector — pseudo_id","text":"","code":"pseudo_id(x, ...)  # S3 method for class 'pseudo_id' pseudo_id(x, ...)  # Default S3 method pseudo_id(x, na_last = TRUE, ...)  # S3 method for class 'factor' pseudo_id(x, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/pseudo_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an ID for a vector — pseudo_id","text":"x vector values ... Additional arguments passed methods na_last Logical FALSE place NA end","code":""},{"path":"https://jmbarbone.github.io/mark/reference/pseudo_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an ID for a vector — pseudo_id","text":"pseudo_id object integer value vector correspond position unique values attribute \"uniques\".","code":""},{"path":"https://jmbarbone.github.io/mark/reference/pseudo_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an ID for a vector — pseudo_id","text":"","code":"set.seed(42) (x <- sample(letters, 10, TRUE)) #>  [1] \"q\" \"e\" \"a\" \"y\" \"j\" \"d\" \"r\" \"z\" \"q\" \"o\" (pid <- pseudo_id(x)) #>  [1] 1 2 3 4 5 6 7 8 1 9 #> Uniques: q e a y j d r z o  attr(pid, \"uniques\")[pid] #>  [1] \"q\" \"e\" \"a\" \"y\" \"j\" \"d\" \"r\" \"z\" \"q\" \"o\""},{"path":"https://jmbarbone.github.io/mark/reference/quiet_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Quiet stop — quiet_stop","title":"Quiet stop — quiet_stop","text":"Quietly calls stop","code":""},{"path":"https://jmbarbone.github.io/mark/reference/quiet_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quiet stop — quiet_stop","text":"","code":"quiet_stop()"},{"path":"https://jmbarbone.github.io/mark/reference/quiet_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quiet stop — quiet_stop","text":"None, called side effects","code":""},{"path":"https://jmbarbone.github.io/mark/reference/range2.html","id":null,"dir":"Reference","previous_headings":"","what":"Range 2 — range2","title":"Range 2 — range2","text":"Employs min() max().  However, base::range(), argument removing Inf values.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/range2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range 2 — range2","text":"","code":"range2(x, na.rm = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/range2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range 2 — range2","text":"x numeric (character) vector (see Note base::min) na.rm Logical, TRUE removes missing values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/range2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Range 2 — range2","text":"numeric vector length 2 minimum maximum values, respectively","code":""},{"path":"https://jmbarbone.github.io/mark/reference/range2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Range 2 — range2","text":"","code":"# \\donttest{ x <- rep(1:1e5, 100) system.time(rep(range(x),  100)) #>    user  system elapsed  #>   0.023   0.004   0.028  system.time(rep(range2(x), 100)) #>    user  system elapsed  #>   0.013   0.000   0.012  x[sample(x, 1e5)] <- NA  system.time(rep(range(x, na.rm = TRUE), 100)) #>    user  system elapsed  #>   0.290   0.019   0.309  system.time(rep(range2(x, na.rm = TRUE), 100)) #>    user  system elapsed  #>   0.013   0.000   0.013  # }"},{"path":"https://jmbarbone.github.io/mark/reference/read_bib.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Bib file — read_bib","title":"Read Bib file — read_bib","text":"Read bib file data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/read_bib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Bib file — read_bib","text":"","code":"read_bib(file, skip = 0L, max_lines = NULL, encoding = \"UTF-8\")"},{"path":"https://jmbarbone.github.io/mark/reference/read_bib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Bib file — read_bib","text":"file File connection skip lines skip max_lines maximum number lines read encoding Assumed encoding file (passed readLines()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/read_bib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Bib file — read_bib","text":"data.frame row bib entry column field","code":""},{"path":"https://jmbarbone.github.io/mark/reference/read_bib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Bib file — read_bib","text":"Inspired partially credited bib2df::bib2df() although dependencies outside base functions much quicker.  speed seems come removing stringr functions simplifying *apply functions. also include many categories possible entry.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/read_bib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Bib file — read_bib","text":"","code":"file <- \"https://raw.githubusercontent.com/jmbarbone/bib-references/master/references.bib\" bibdf <- read_bib(file, max_lines = 51L)  if (package_available(\"tibble\")) {   tibble::as_tibble(bibdf) } else {   head(bibdf) } #> # A tibble: 4 × 16 #>   key     field author journal title year  issn  month number pages volume doi   #>   <chr>   <chr> <chr>  <chr>   <chr> <chr> <chr> <chr> <chr>  <chr> <chr>  <chr> #> 1 ames20… arti… Ames,… Journa… The … 2006  0092… aug   4      440-… 40     10.1… #> 2 anders… arti… Ander… Psycho… Effe… 2001  NA    NA    5      353-… 12     10.1… #> 3 ayduk2… arti… Ayduk… Journa… Regu… 2000  NA    NA    5      776   79     10.1… #> 4 barbon… inpr… Barbo… NA      Equa… 2023  NA    Jul   S18    e077… 19     doi/… #> # ℹ 4 more variables: publisher <chr>, note <chr>, url <chr>, abstract <chr>  if (package_available(\"bib2df\") & package_available(\"bench\")) {   file <- system.file(\"extdata\", \"bib2df_testfile_3.bib\", package = \"bib2df\")    # Doesn't include the 'tidying' up   foo <- function(file) {     bib <- (\"bib2df\" %colons% \"bib2df_read\")(file)     (\"bib2df\" %colons% \"bib2df_gather\")(bib)   }  # \\donttest{   bench::mark(     read_bib = read_bib(file),     bib2df = bib2df::bib2df(file),     foo = foo(file),     check = FALSE   )[1:9] # } } #> # A tibble: 3 × 9 #>   expression      min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time #>   <bch:expr> <bch:tm> <bch:>     <dbl> <bch:byt>    <dbl> <int> <dbl>   <bch:tm> #> 1 read_bib     2.02ms 2.08ms      475.    9.41KB     8.91   213     4      449ms #> 2 bib2df       5.82ms 5.93ms      168.    2.78MB     6.73    75     3      446ms #> 3 foo          2.67ms 2.75ms      361.  348.54KB     6.56   165     3      457ms"},{"path":"https://jmbarbone.github.io/mark/reference/recode_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode by — recode_by","title":"Recode by — recode_by","text":"simple implementation recoding","code":""},{"path":"https://jmbarbone.github.io/mark/reference/recode_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode by — recode_by","text":"","code":"recode_by(x, by, vals = NULL, mode = \"any\")  recode_only(x, by, vals = NULL)"},{"path":"https://jmbarbone.github.io/mark/reference/recode_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode by — recode_by","text":"x vector recode names vector (new = old); non-matching values set appropriate NA vals optional vector values use lieu names vector; takes priority names().  can length single value. mode passed .vector()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/recode_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode by — recode_by","text":"vector values x","code":""},{"path":"https://jmbarbone.github.io/mark/reference/recode_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode by — recode_by","text":"can comparable dplyr::recode() expect values arranged new = old rather old = new allows separate vector passed new. recode_only() recode values matches /val. mode automatically set according mode(x).  functions like base::replace() extra features","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/recode_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode by — recode_by","text":"","code":"recode_by(1:3, c(a = 1, b = 2)) #> [1] \"a\" \"b\" NA  recode_by(letters[1:3], c(`1` = \"a\", `2` = \"b\"))                   # will not guess mode #> [1] \"1\" \"2\" NA  recode_by(letters[1:3], c(`1` = \"a\", `2` = \"b\"), mode = \"integer\") # make as integer #> [1]  1  2 NA recode_by(letters[1:3], c(\"a\", \"b\"), vals = 1:2)                   # or pass to vals #> [1]  1  2 NA  recode_only(letters[1:3], c(\"zzz\" = \"a\")) #> [1] \"zzz\" \"b\"   \"c\"   recode_only(letters[1:3], c(`1` = \"a\")) # returns as \"1\" #> [1] \"1\" \"b\" \"c\" recode_only(1:3, c(\"a\" = 1))            # coerced to NA #> Warning: NAs introduced by coercion #> [1] NA  2  3  # Pass list for multiples recode_only(letters[1:10], list(abc = c(\"a\", \"b\", \"c\"), ef = c(\"e\", \"f\"))) #>  [1] \"abc\" \"abc\" \"abc\" \"d\"   \"ef\"  \"ef\"  \"g\"   \"h\"   \"i\"   \"j\""},{"path":"https://jmbarbone.github.io/mark/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. fuj %::%, %:::%, %colons%, %len%, %names%, %%, %wi%, %wo%, %||%, any_match, exattr, flip, is_linux, is_macos, is_named, is_windows, muffle, no_match, quick_df, quick_dfl, remove_names, require_namespace, set_names, struct, wuffle magrittr %>%","code":""},{"path":"https://jmbarbone.github.io/mark/reference/reindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Reindex a data.frame — reindex","title":"Reindex a data.frame — reindex","text":"Reindexes data.frame reference","code":""},{"path":"https://jmbarbone.github.io/mark/reference/reindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reindex a data.frame — reindex","text":"","code":"reindex(   x,   index = NULL,   new_index,   expand = c(\"intersect\", \"both\"),   sort = FALSE )"},{"path":"https://jmbarbone.github.io/mark/reference/reindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reindex a data.frame — reindex","text":"x data.frame index column name number index use; NULL assume first column; value row.names use row.names(x) new_index column vector new index value expand Character switch expand keep values intersect (none), values x index, retain values found. sort Logical, TRUE sort rows output","code":""},{"path":"https://jmbarbone.github.io/mark/reference/reindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reindex a data.frame — reindex","text":"data.frame rows index","code":""},{"path":"https://jmbarbone.github.io/mark/reference/reindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reindex a data.frame — reindex","text":"","code":"iris1 <- head(iris, 5) iris1$index <- 1:5 reindex(iris1, \"index\", seq(2, 8, 2)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species index #> 2          4.9         3.0          1.4         0.2  setosa     2 #> 4          4.6         3.1          1.5         0.2  setosa     4 reindex(iris1, \"index\", seq(2, 8, 2), expand = \"both\") #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species index #> 1          5.1         3.5          1.4         0.2  setosa     1 #> 2          4.9         3.0          1.4         0.2  setosa     2 #> 3          4.7         3.2          1.3         0.2  setosa     3 #> 4          4.6         3.1          1.5         0.2  setosa     4 #> 5          5.0         3.6          1.4         0.2  setosa     5 #> 6           NA          NA           NA          NA    <NA>    NA #> 8           NA          NA           NA          NA    <NA>    NA  # Using letters will show changes in rownames iris1$index <- letters[1:5] reindex(iris1, \"index\", letters[seq(2, 8, 2)]) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species index #> b           NA          NA           NA          NA    <NA>  <NA> #> d           NA          NA           NA          NA    <NA>  <NA> reindex(iris1, \"index\", seq(2, 8, 2)) #> [1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species      #> [6] index        #> <0 rows> (or 0-length row.names) reindex(iris1, \"index\", seq(2, 8, 2), expand = \"both\") #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species index #> a           NA          NA           NA          NA    <NA>  <NA> #> b           NA          NA           NA          NA    <NA>  <NA> #> c           NA          NA           NA          NA    <NA>  <NA> #> d           NA          NA           NA          NA    <NA>  <NA> #> e           NA          NA           NA          NA    <NA>  <NA> #> 2          4.9         3.0          1.4         0.2  setosa     b #> 4          4.6         3.1          1.5         0.2  setosa     d #> 6           NA          NA           NA          NA    <NA>  <NA> #> 8           NA          NA           NA          NA    <NA>  <NA>"},{"path":"https://jmbarbone.github.io/mark/reference/remove_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NA — remove_na","title":"Remove NA — remove_na","text":"Remove NAs vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/remove_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NA — remove_na","text":"","code":"remove_na(x)  # Default S3 method remove_na(x)  # S3 method for class 'list' remove_na(x)  # S3 method for class 'factor' remove_na(x)  # S3 method for class 'fact' remove_na(x)"},{"path":"https://jmbarbone.github.io/mark/reference/remove_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NA — remove_na","text":"x vector values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/remove_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NA — remove_na","text":"x without values .na(x) TRUE factors, new factor (ordered .ordered(x))","code":""},{"path":"https://jmbarbone.github.io/mark/reference/remove_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove NA — remove_na","text":"remove_na.factor remove NA values identified levels() integer value level.  factors recreated NA values , present, NA level removed.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/remove_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove NA — remove_na","text":"","code":"remove_na(c(4, 1, 2, NA, 4, NA, 3, 2)) #> [1] 4 1 2 4 3 2  # removes based on levels remove_na(fact(c(\"b\", NA, \"a\", \"c\"))) #> [1] b a c #> Levels: b a c  # removes based on values x <- as_ordered(c(\"b\", \"d\", \"a\", \"c\")) x[2:3] <- NA str(remove_na(x)) #>  Ord.factor w/ 4 levels \"b\"<\"d\"<\"a\"<\"c\": 1 4 #>  - attr(*, \"uniques\")= chr [1:4] \"b\" \"d\" \"a\" \"c\" #>  - attr(*, \"na\")= int 0"},{"path":"https://jmbarbone.github.io/mark/reference/remove_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NULL — remove_null","title":"Remove NULL — remove_null","text":"Remove NULL results list","code":""},{"path":"https://jmbarbone.github.io/mark/reference/remove_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NULL — remove_null","text":"","code":"remove_null(x)"},{"path":"https://jmbarbone.github.io/mark/reference/remove_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NULL — remove_null","text":"x list","code":""},{"path":"https://jmbarbone.github.io/mark/reference/remove_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NULL — remove_null","text":"list x without NULL","code":""},{"path":"https://jmbarbone.github.io/mark/reference/remove_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove NULL — remove_null","text":"","code":"x <- list(a = letters[1:5], b = NULL, c = complex(3)) x #> $a #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $b #> NULL #>  #> $c #> [1] 0+0i 0+0i 0+0i #>  remove_null(x) #> $a #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $c #> [1] 0+0i 0+0i 0+0i #>"},{"path":"https://jmbarbone.github.io/mark/reference/round_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding by a specific interval. — round_by","title":"Rounding by a specific interval. — round_by","text":"Rounds number vector numbers another","code":""},{"path":"https://jmbarbone.github.io/mark/reference/round_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding by a specific interval. — round_by","text":"","code":"round_by(x, by = 1, method = c(\"round\", \"ceiling\", \"floor\"), include0 = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/round_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding by a specific interval. — round_by","text":"x number vector round. number round method option explicitly specify automatic rounding, ceiling, floor include0 FALSE replaces 0 ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/round_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounding by a specific interval. — round_by","text":"vector doubles length x","code":""},{"path":"https://jmbarbone.github.io/mark/reference/round_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding by a specific interval. — round_by","text":"","code":"x <- seq(1, 13, by = 4/3)  cbind(   x,   by_1 = round_by(x, 1),   by_2 = round_by(x, 2),   by_3 = round_by(x, 3) ) #>               x by_1 by_2 by_3 #>  [1,]  1.000000    1    0    0 #>  [2,]  2.333333    2    2    3 #>  [3,]  3.666667    4    4    3 #>  [4,]  5.000000    5    4    6 #>  [5,]  6.333333    6    6    6 #>  [6,]  7.666667    8    8    9 #>  [7,]  9.000000    9    8    9 #>  [8,] 10.333333   10   10    9 #>  [9,] 11.666667   12   12   12 #> [10,] 13.000000   13   12   12"},{"path":"https://jmbarbone.github.io/mark/reference/row_bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Row bind — row_bind","title":"Row bind — row_bind","text":"Bind list data.frames","code":""},{"path":"https://jmbarbone.github.io/mark/reference/row_bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row bind — row_bind","text":"","code":"row_bind(...)"},{"path":"https://jmbarbone.github.io/mark/reference/row_bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row bind — row_bind","text":"... list data.frames attached row","code":""},{"path":"https://jmbarbone.github.io/mark/reference/row_bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row bind — row_bind","text":"data.frame combining rows data.frames ... columns, appear. empty data.frame 0 columns 0 rows returned ... length","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/rscript.html","id":null,"dir":"Reference","previous_headings":"","what":"Rscript — rscript","title":"Rscript — rscript","text":"Implements Rscript system2","code":""},{"path":"https://jmbarbone.github.io/mark/reference/rscript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rscript — rscript","text":"","code":"rscript(x, ops = NULL, args = NULL, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/rscript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rscript — rscript","text":"x R file run ops character vector options (\"--\" added ) args character vector arguments pass ... Additional arguments passed system2","code":""},{"path":"https://jmbarbone.github.io/mark/reference/rscript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rscript — rscript","text":"character vector result calling Rscript via system2()","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/save_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Save source — save_source","title":"Save source — save_source","text":"Source file save file","code":""},{"path":"https://jmbarbone.github.io/mark/reference/save_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save source — save_source","text":"","code":"save_source(env = parent.frame(), file = mark_temp(\"Rds\"), name = NULL)"},{"path":"https://jmbarbone.github.io/mark/reference/save_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save source — save_source","text":"env parent environment file file save environment name optional name environment (mostly cosmetic)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/save_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save source — save_source","text":"source_env/environment object, created env","code":""},{"path":"https://jmbarbone.github.io/mark/reference/set_names0.html","id":null,"dir":"Reference","previous_headings":"","what":"Set names — set_names0","title":"Set names — set_names0","text":"Sets removes names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/set_names0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set names — set_names0","text":"","code":"set_names0(x, nm = x)  names_switch(x)"},{"path":"https://jmbarbone.github.io/mark/reference/set_names0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set names — set_names0","text":"x vector values nm vector names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/set_names0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set names — set_names0","text":"set_names0(): x nm values assigned names (x NULL, NULL returned) remove_names(): x without names names_switch(): character vector equal length x names values switched","code":""},{"path":"https://jmbarbone.github.io/mark/reference/simpleTimeReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Time reports — simpleTimeReport","title":"Time reports — simpleTimeReport","text":"function can used evaluate expression line--line capture outputs, errors, messages, evaluation time.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/simpleTimeReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time reports — simpleTimeReport","text":"","code":"simpleTimeReport(title = NULL, expr, envir = parent.frame())"},{"path":"https://jmbarbone.github.io/mark/reference/simpleTimeReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time reports — simpleTimeReport","text":"title title printed expr expression run envir environment evaluate expr","code":""},{"path":"https://jmbarbone.github.io/mark/reference/simpleTimeReport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time reports — simpleTimeReport","text":"reported_results/list object containing results, outputs, messages, warnings, errors","code":""},{"path":"https://jmbarbone.github.io/mark/reference/simpleTimeReport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time reports — simpleTimeReport","text":"Evaluate code report time difference","code":""},{"path":"https://jmbarbone.github.io/mark/reference/simpleTimeReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time reports — simpleTimeReport","text":"","code":"simpleTimeReport(\"example\", {   print(\"1\")   Sys.sleep(1)   warning(\"this is a warning\")   for (i in 1:5) {     Sys.sleep(0.5)   }   sample(1e6, 1e6, TRUE) }) #> example #> -------------------------------------------------------------------------------- #> print(\"1\")                         #> Sys.sleep(1)                      [1.00 s] #> warning(\"this is a warning\")       #> for (i in 1:5) { Sys.sleep(0.5)}  [2.50 s] #> sample(1e+06, 1e+06, TRUE)         #> -------------------------------------------------------------------------------- #> Finished [3.53 s] #>  #> Warnings #> -------------------------------------------------------------------------------- #> 3 : warning(\"this is a warning\") #> Warning: this is a warning #>  #> Outputs #> -------------------------------------------------------------------------------- #> 1 : print(\"1\") #> [1] \"1\""},{"path":"https://jmbarbone.github.io/mark/reference/sort_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort by — sort_by","title":"Sort by — sort_by","text":"Sort object another object","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sort_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort by — sort_by","text":"","code":"sort_by(x, by, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/sort_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort by — sort_by","text":"x vector Another vector ... Additional arguments passed base::order()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sort_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort by — sort_by","text":"values x, resorted","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sort_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort by — sort_by","text":"","code":"l3 <- letters[1:3] sort_by(l3, c(3, 2, 1)) #> [1] \"c\" \"b\" \"a\" # make a factor object with the reversed order f <- factor(l3, levels = rev(l3)) sort_by(f, l3) #> [1] a b c #> Levels: c b a sort_by(1:3, rev(l3)) #> [1] 3 2 1"},{"path":"https://jmbarbone.github.io/mark/reference/sort_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort by names — sort_names","title":"Sort by names — sort_names","text":"Sort vector name","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sort_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort by names — sort_names","text":"","code":"sort_names(x, numeric = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/sort_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort by names — sort_names","text":"x named vector values numeric TRUE try coerce numeric","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sort_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort by names — sort_names","text":"x sorted names()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/source_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Source file from directory — source_files","title":"Source file from directory — source_files","text":"Walk files directory output . Files sources order names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/source_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source file from directory — source_files","text":"","code":"source_r_dir(dir, echo = FALSE, quiet = FALSE, ...)  source_r_file(path, echo = FALSE, quiet = FALSE, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/source_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source file from directory — source_files","text":"dir location R scripts echo logical; TRUE, expression printed     parsing, evaluation. quiet Logical.  Whether print message file. ... Additional arguments passed base::source() path location R file.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/source_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source file from directory — source_files","text":"None, called side effects","code":""},{"path":"https://jmbarbone.github.io/mark/reference/source_to_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Source to environment — source_to_env","title":"Source to environment — source_to_env","text":"Source R script environment","code":""},{"path":"https://jmbarbone.github.io/mark/reference/source_to_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source to environment — source_to_env","text":"","code":"source_to_env(x, ops = NULL)"},{"path":"https://jmbarbone.github.io/mark/reference/source_to_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source to environment — source_to_env","text":"x R script ops Options passed rscript","code":""},{"path":"https://jmbarbone.github.io/mark/reference/source_to_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source to environment — source_to_env","text":"Invisibly, environment variable objects/results created x","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sourcing.html","id":null,"dir":"Reference","previous_headings":"","what":"Sourcing extensions — sourcing","title":"Sourcing extensions — sourcing","text":"Functions extending sourcing features","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sourcing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sourcing extensions — sourcing","text":"","code":"ksource(file, ..., quiet = TRUE, cd = FALSE, env = parent.frame())  try_source(file, cd = FALSE, ...)  try_ksource(file, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/sourcing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sourcing extensions — sourcing","text":"file R Rmd file. ... Additional arguments passed base::source() quiet Logical; Determines whether apply silence knitr::purl() cd Logical; TRUE, R working directory temporarily changed directory containing file evaluating env environment determining parsed expressions evaluated","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sourcing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sourcing extensions — sourcing","text":"ksource(): Invisibly, result calling source() .R file conversion file try_source(), try_ksource(): attempts source() ksource() converts errors warnings","code":""},{"path":"https://jmbarbone.github.io/mark/reference/sourcing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sourcing extensions — sourcing","text":"try_source() output error message rather completely preventing execution. can useful script calls multiple, independent files sourced single failure prevent entire run fail well.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/str_extract_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract date from string — str_extract_date","title":"Extract date from string — str_extract_date","text":"Extract date string","code":""},{"path":"https://jmbarbone.github.io/mark/reference/str_extract_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract date from string — str_extract_date","text":"","code":"str_extract_date(x, format = \"%Y-%m-%d\")  str_extract_datetime(x, format = \"%Y-%m-%d %H%M%S\")"},{"path":"https://jmbarbone.github.io/mark/reference/str_extract_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract date from string — str_extract_date","text":"x character vector format date format find","code":""},{"path":"https://jmbarbone.github.io/mark/reference/str_extract_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract date from string — str_extract_date","text":"Date (found) NA","code":""},{"path":"https://jmbarbone.github.io/mark/reference/str_extract_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract date from string — str_extract_date","text":"","code":"str_extract_date(\"This is a file name 2020-02-21.csv\") #> [1] \"2020-02-21\" str_extract_date(c(\"This is a file name 2020-02-21.csv\",                    \"Date of 2012-06-15 here\")) #> [1] \"2020-02-21\" \"2012-06-15\" str_extract_date(c(\"This is a file name 2020-02-21.csv\", \"No date\")) #> [1] \"2020-02-21\" NA           str_extract_date(\"Last saved 17 December 2019\", format = \"%d %B %Y\") #> [1] \"2019-12-17\"  str_extract_datetime(c(\"2020-02-21 235033\", \"2012-12-12 121212\")) #> [1] \"2020-02-21 23:50:33 UTC\" \"2012-12-12 12:12:12 UTC\" str_extract_datetime(\"This is a file name 2020-02-21 235033.csv\") #> [1] \"2020-02-21 23:50:33 UTC\""},{"path":"https://jmbarbone.github.io/mark/reference/str_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"String Slice — str_slice","title":"String Slice — str_slice","text":"Slice/split string multiple lines desired length line.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/str_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String Slice — str_slice","text":"","code":"str_slice(x, n = 80L)  str_slice_by_word(x, n = 80L)"},{"path":"https://jmbarbone.github.io/mark/reference/str_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String Slice — str_slice","text":"x character vector n Integer, length line split","code":""},{"path":"https://jmbarbone.github.io/mark/reference/str_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String Slice — str_slice","text":"character vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/str_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String Slice — str_slice","text":"","code":"if (requireNamespace(\"stringi\")) {   x <- stringi::stri_rand_lipsum(1)   str_slice(x)   str_slice_by_word(x, n = 50L) } #>  [1] \"Lorem ipsum dolor sit amet, volutpat dapibus\"       #>  [2] \"egestas sagittis felis in leo efficitur felis.\"     #>  [3] \"Enim nisi eu libero, sed nullam metus mauris,\"      #>  [4] \"ipsum quisque. Sed velit neque urna vitae\"          #>  [5] \"elementum sed ac sit a, maximus. Dis ultrices est.\" #>  [6] \"At id ac sed, lorem. Mauris lacinia, ac lobortis\"   #>  [7] \"ultrices conubia sed at risus nec habitant? Eu ac,\" #>  [8] \"euismod congue id donec. Lorem vivamus id nec\"      #>  [9] \"euismod, phasellus. Sit est mauris lorem, ipsum\"    #> [10] \"porttitor litora, gravida dolor ac duis sit. Magna\" #> [11] \"iaculis tortor nam pellentesque ridiculus\"          #> [12] \"efficitur sed placerat. Praesent cursus. Neque,\"    #> [13] \"bibendum ex nullam in quisque elementum in,\"        #> [14] \"efficitur. Sed vitae sagittis a conubia penatibus,\" #> [15] \"nullam pharetra donec sociosqu mus.\""},{"path":"https://jmbarbone.github.io/mark/reference/switch-ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch with a list of parameters — switch-ext","title":"Switch with a list of parameters — switch-ext","text":"switch_params() vectorized version switch switch_case() uses formula syntax return value right tilde (~) x TRUE switch_in_case() special case switch_case() match()-ing x values left return value right.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/switch-ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch with a list of parameters — switch-ext","text":"","code":"switch_params(x, ...)  switch_in_case(x, ..., .default = NULL, .envir = parent.frame())  switch_case(..., .default = NULL, .envir = parent.frame())"},{"path":"https://jmbarbone.github.io/mark/reference/switch-ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch with a list of parameters — switch-ext","text":"x vector values ... Case evaluations (named switch_params) .default default value matches found ... (default: NULL produces NA value derived ...) .envir environment evaluate LHS ... (default: parent.frame())","code":""},{"path":"https://jmbarbone.github.io/mark/reference/switch-ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch with a list of parameters — switch-ext","text":"named vector values length x; switch_case, unnamed vector values matching rhs ... Inspired : https://stackoverflow.com//32835930/12126576 https://github.com/tidyverse/dplyr/issues/5811","code":""},{"path":"https://jmbarbone.github.io/mark/reference/switch-ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Switch with a list of parameters — switch-ext","text":"Switch list params","code":""},{"path":"https://jmbarbone.github.io/mark/reference/switch-ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch with a list of parameters — switch-ext","text":"","code":"# by single switch_params(c(\"j\", \"m\", \"b\"), j = 10, b = 2, m = 13) #>  j  m  b  #> 10 13  2    # match with TRUE switch_case(   1:10 == 9      ~ NA_integer_,   1:10 %% 3 == 0 ~ 1:10,   1:10 %% 4 == 0 ~ 11:20,   1:10 %% 5 == 0 ~ 21:30,   1:10 %% 2 == 0 ~ 31:40,   .default = -1L ) #>  [1] -1 32  3 14 25  6 -1 18 NA 30  # match within a vector switch_in_case(   c(1, 2, 12, 4, 20, 21),   1:10  ~ 1,   11:20 ~ 2 ) #>  1  2 12  4 20 21  #>  1  1  2  1  2 NA   switch_in_case(   c(\"a\", \"b\", \"d\", \"e\", \"g\", \"j\"),   letters[1:3] ~ \"a\",   letters[5:6] ~ \"e\" ) #>   a   b   d   e   g   j  #> \"a\" \"a\"  NA \"e\"  NA  NA   use_these <- c(1, 3, 2, 5) switch_in_case(   1:10,   use_these ~ TRUE,   .default = FALSE ) #>     1     2     3     4     5     6     7     8     9    10  #>  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE   ne <- new.env() ne$use_these2 <- use_these # error try(switch_in_case(   1:10,   use_these2 ~ TRUE )) #> Error in eval(parse(text = i[1L]), envir = .envir) :  #>   object 'use_these2' not found switch_in_case(   1:10,   use_these2 ~ TRUE,   .envir = ne ) #>    1    2    3    4    5    6    7    8    9   10  #> TRUE TRUE TRUE   NA TRUE   NA   NA   NA   NA   NA   switch_in_case(   seq.int(1, 60, 6),   1:10          ~ \"a\",   11:20         ~ \"b\",   c(22, 24, 26) ~ \"c\",   30:Inf        ~ \"d\" ) #>   1   7  13  19  25  31  37  43  49  55  #> \"a\" \"a\" \"b\" \"b\"  NA \"d\" \"d\" \"d\" \"d\" \"d\"   # Use functions switch_in_case(   1:6,   c(1, 3, 5) ~ exp,   c(2, 4) ~ log ) #>           1           2           3           4           5           6  #>   2.7182818   0.6931472  20.0855369   1.3862944 148.4131591          NA"},{"path":"https://jmbarbone.github.io/mark/reference/t_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame transpose — t_df","title":"Data frame transpose — t_df","text":"transposes data.frame t() transforms back data.frame column row names cleaned .  data types may mixed reduced characters, may useful visual viewing data.frame.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/t_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame transpose — t_df","text":"","code":"t_df(x, id = NULL)"},{"path":"https://jmbarbone.github.io/mark/reference/t_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame transpose — t_df","text":"x data.frame id longer used","code":""},{"path":"https://jmbarbone.github.io/mark/reference/t_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame transpose — t_df","text":"transposed data.frame columns (\"colname\", \"row_1\", ..., row x.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/t_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data frame transpose — t_df","text":"Transposes data.frame data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/t_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame transpose — t_df","text":"","code":"x <- data.frame(col_a = Sys.Date() + 1:5, col_b = letters[1:5], col_c = 1:5) t_df(x) #>   colname      row_1      row_2      row_3      row_4      row_5 #> 1   col_a 2025-05-11 2025-05-12 2025-05-13 2025-05-14 2025-05-15 #> 2   col_b          a          b          c          d          e #> 3   col_c          1          2          3          4          5"},{"path":"https://jmbarbone.github.io/mark/reference/tableNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Table NA values — tableNA","title":"Table NA values — tableNA","text":"Tables whether data NAs ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/tableNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table NA values — tableNA","text":"","code":"tableNA(..., .list = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/tableNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table NA values — tableNA","text":"... one objects can interpreted factors     (including numbers character strings), list (    data frame) whose     components can interpreted.  (.table, arguments     passed specific methods; .data.frame, unused.) .list Logical, TRUE ... list, c","code":""},{"path":"https://jmbarbone.github.io/mark/reference/tableNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table NA values — tableNA","text":"table() returns contingency table, object   class \"table\", array integer values.   Note unlike S result always array, 1D   array one factor given. .table .table coerce test contingency   table, respectively. .data.frame method objects inheriting class   \"table\" can used convert array-based representation   contingency table data frame containing classifying   factors corresponding entries (latter component   named responseName).  inverse xtabs.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/tableNA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table NA values — tableNA","text":"data checked .na() resulting TRUE FALSE tabulated.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/tableNA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Table NA values — tableNA","text":"Becker, R. ., Chambers, J. M. Wilks, . R. (1988)   New S Language.   Wadsworth & Brooks/Cole.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/tableNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table NA values — tableNA","text":"","code":"x <- list(   a = c(1, 2, NA, 3),   b = c(\"A\", NA, \"B\", \"C\"),   c = as.Date(c(\"2020-01-02\", NA, NA, \"2020-03-02\")) ) tableNA(x) # entire list #> x #>  TRUE FALSE  #>     0     3  tableNA(x, .list = TRUE) # counts for each #> , , c = TRUE #>  #>        b #> a       TRUE FALSE #>   TRUE     0     1 #>   FALSE    1     0 #>  #> , , c = FALSE #>  #>        b #> a       TRUE FALSE #>   TRUE     0     0 #>   FALSE    0     2 #>  tableNA(x[1], x[2]) #>        x[2] #> x[1]    TRUE FALSE #>   TRUE     0     0 #>   FALSE    0     1 tableNA(x[1], x[2], x[3]) # equivalent ot tableNA(x, .list = TRUE) #> , , x[3] = TRUE #>  #>        x[2] #> x[1]    TRUE FALSE #>   TRUE     0     0 #>   FALSE    0     0 #>  #> , , x[3] = FALSE #>  #>        x[2] #> x[1]    TRUE FALSE #>   TRUE     0     0 #>   FALSE    0     1 #>"},{"path":"https://jmbarbone.github.io/mark/reference/that.html","id":null,"dir":"Reference","previous_headings":"","what":"That — that","title":"That — that","text":"Grammatical correctness","code":""},{"path":"https://jmbarbone.github.io/mark/reference/that.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"That — that","text":"","code":"that(x, arr.ind = FALSE, useNames = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/that.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"That — that","text":"x logical vector array.  NAs    allowed omitted (treated FALSE). arr.ind logical; array indices returned    x array?  Anything single true value    treated false. useNames logical indicating value arrayInd()    (non-null) dimnames .","code":""},{"path":"https://jmbarbone.github.io/mark/reference/that.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"That — that","text":"see base::()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/that.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"That — that","text":"See fortunes::fortune(175).","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/to_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"To Boolean — to_boolean","title":"To Boolean — to_boolean","text":"Convert vector boolean/logical","code":""},{"path":"https://jmbarbone.github.io/mark/reference/to_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To Boolean — to_boolean","text":"","code":"to_boolean(x, ...)  # S3 method for class 'logical' to_boolean(x, ...)  # S3 method for class 'numeric' to_boolean(x, true = 1L, false = 0L, ...)  # S3 method for class 'character' to_boolean(x, true = NULL, false = NULL, ...)  # S3 method for class 'factor' to_boolean(x, true = NULL, false = NULL, ...)"},{"path":"https://jmbarbone.github.io/mark/reference/to_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To Boolean — to_boolean","text":"x vector values ... Additional arguments passed methods true vector values convert TRUE false vector values convert FALSE","code":""},{"path":"https://jmbarbone.github.io/mark/reference/to_boolean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To Boolean — to_boolean","text":"logical vector equal length x","code":""},{"path":"https://jmbarbone.github.io/mark/reference/to_row_names.html","id":null,"dir":"Reference","previous_headings":"","what":"To row names — to_row_names","title":"To row names — to_row_names","text":"Converts column row names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/to_row_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To row names — to_row_names","text":"","code":"to_row_names(data, row_names = 1L)"},{"path":"https://jmbarbone.github.io/mark/reference/to_row_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To row names — to_row_names","text":"data data.frame row_names numeric position column.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/to_row_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To row names — to_row_names","text":"data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/to_row_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To row names — to_row_names","text":"","code":"x <- data.frame(   a = 1:4,   b = letters[1:4] )  to_row_names(x) #>   b #> 1 a #> 2 b #> 3 c #> 4 d to_row_names(x, \"b\") #>   a #> a 1 #> b 2 #> c 3 #> d 4"},{"path":"https://jmbarbone.github.io/mark/reference/todos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get TODOs — todos","title":"Get TODOs — todos","text":"Search #`` TODO tags","code":""},{"path":"https://jmbarbone.github.io/mark/reference/todos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get TODOs — todos","text":"","code":"todos(   pattern = NULL,   path = \".\",   force = getOption(\"mark.todos.force\"),   ext = getOption(\"mark.todos.ext\"),   ignore = NULL,   ... )  fixmes(   pattern = NULL,   path = \".\",   force = getOption(\"mark.todos.force\"),   ext = getOption(\"mark.todos.ext\"),   ignore = NULL,   ... )"},{"path":"https://jmbarbone.github.io/mark/reference/todos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get TODOs — todos","text":"pattern character string containing regular expression filter comments tags; default NULL filter path search todos.  directory, paths matching ext included.  file, ext ignored. force TRUE force searching files directories contain .Rproj file.  can controlled option mark.todos.force ext vector file extensions search todos.  Ignored path directory NULL. ignore regular expression files ignore.  Ignored path directory NULL. ... Additional parameters passed grep (Except pattern, x, value)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/todos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get TODOs — todos","text":"NULL none found, otherwise data.frame line number, file name, TODO comment.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/todos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get TODOs — todos","text":"Searches TODO comments files.  Extensions md, Rmd, qmd specifically search <-- TODO * --> string, whereas everything else found # TODO.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/todos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get TODOs — todos","text":"","code":"if (FALSE) { # \\dontrun{ file <- tempfile() writeLines(c(   \"# TODO make x longer\",   \"x <- 1:10\",   \"length(x)\",   \"# TODO add another example\",   \"# FIXME This is a fixme\"   ), file) todos(path = file) todos(\"example\", path = file) fixmes(path = file) file.remove(file) } # }"},{"path":"https://jmbarbone.github.io/mark/reference/tryn.html","id":null,"dir":"Reference","previous_headings":"","what":"Try an expression a set number of times — tryn","title":"Try an expression a set number of times — tryn","text":"Try expression set number times","code":""},{"path":"https://jmbarbone.github.io/mark/reference/tryn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try an expression a set number of times — tryn","text":"","code":"tryn(expr, n = 10, silent = TRUE)"},{"path":"https://jmbarbone.github.io/mark/reference/tryn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try an expression a set number of times — tryn","text":"expr expression evaluate n number attempts error silent whether suppress warnings","code":""},{"path":"https://jmbarbone.github.io/mark/reference/tryn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try an expression a set number of times — tryn","text":"result expr","code":""},{"path":"https://jmbarbone.github.io/mark/reference/tryn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try an expression a set number of times — tryn","text":"","code":"foo <- function() stop(\"I added an error\") try(tryn(n = 10, foo())) #> Error : tryn() failed: maximum attempts reached: 10 #> Error in foo() : I added an error"},{"path":"https://jmbarbone.github.io/mark/reference/unique_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique rows — unique_rows","title":"Unique rows — unique_rows","text":"Drops duplicated rows","code":""},{"path":"https://jmbarbone.github.io/mark/reference/unique_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique rows — unique_rows","text":"","code":"unique_rows(data, cols = NULL, from_last = FALSE, invert = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/unique_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique rows — unique_rows","text":"data data.frame cols Columns compare ; NULL selects columns from_last TRUE returns last row containing duplicates, rather first invert TRUE returns duplicated rows","code":""},{"path":"https://jmbarbone.github.io/mark/reference/unique_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique rows — unique_rows","text":"data duplicates removes","code":""},{"path":"https://jmbarbone.github.io/mark/reference/unique_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unique rows — unique_rows","text":"","code":"df <- quick_dfl(   i = 1:4,   a = rep(1:2, 2L),   b = rep(\"a\", 4L), )  unique_rows(df, 2:3) #>   i a b #> 1 1 1 a #> 2 2 2 a unique_rows(df, c(\"a\", \"b\"), from_last = TRUE, invert = TRUE) #>   i a b #> 1 1 1 a #> 2 2 2 a"},{"path":"https://jmbarbone.github.io/mark/reference/unlist0.html","id":null,"dir":"Reference","previous_headings":"","what":"Unlist and squash — unlist0","title":"Unlist and squash — unlist0","text":"Unlist without unique names; combine names unique values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/unlist0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unlist and squash — unlist0","text":"","code":"unlist0(x)  squash_vec(x, sep = \".\")"},{"path":"https://jmbarbone.github.io/mark/reference/unlist0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unlist and squash — unlist0","text":"x vector values sep separation combining names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/unlist0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unlist and squash — unlist0","text":"unlist0(): vector possibility non-unique names squash_vec(): vector unique values names","code":""},{"path":"https://jmbarbone.github.io/mark/reference/unlist0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unlist and squash — unlist0","text":"unlist0() much like unlist() expect name made unique. squash_vec() works differently","code":""},{"path":"https://jmbarbone.github.io/mark/reference/unlist0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unlist and squash — unlist0","text":"","code":"x <- list(a = 1:3, b = 2, c = 2:4) y <- c(a = 1, b = 1, c = 1, d = 2, e = 3, f = 3)  # unlist0() doesn't force unique names unlist(x)   # names: a1 a2 a3  b c1 c2 c3 #> a1 a2 a3  b c1 c2 c3  #>  1  2  3  2  2  3  4  unlist0(x)  # names: a a a  b c c c #> a a a b c c c  #> 1 2 3 2 2 3 4  unlist0(y)  # no change #> a b c d e f  #> 1 1 1 2 3 3   # squash_vec() is like the inverse of unlist0() because it works on values squash_vec(x) #>     a a.b.c   a.c     c  #>     1     2     3     4  squash_vec(y) #> a.b.c     d   e.f  #>     1     2     3"},{"path":"https://jmbarbone.github.io/mark/reference/use_author.html","id":null,"dir":"Reference","previous_headings":"","what":"Add author to DESCRIPTION — use_author","title":"Add author to DESCRIPTION — use_author","text":"Adds author description","code":""},{"path":"https://jmbarbone.github.io/mark/reference/use_author.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add author to DESCRIPTION — use_author","text":"","code":"use_author(author_info = find_author())"},{"path":"https://jmbarbone.github.io/mark/reference/use_author.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add author to DESCRIPTION — use_author","text":"author_info Author information named list","code":""},{"path":"https://jmbarbone.github.io/mark/reference/use_author.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add author to DESCRIPTION — use_author","text":"None, called side effects","code":""},{"path":"https://jmbarbone.github.io/mark/reference/use_author.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add author to DESCRIPTION — use_author","text":"valid single author.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/utils-paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste combine — utils-paste","title":"Paste combine — utils-paste","text":"Paste combine","code":""},{"path":"https://jmbarbone.github.io/mark/reference/utils-paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste combine — utils-paste","text":"","code":"paste_c(x, y, collate = TRUE, sep = \"\")  paste_combine(..., collate = TRUE, sep = \"\")  collapse0(..., sep = \"\")"},{"path":"https://jmbarbone.github.io/mark/reference/utils-paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste combine — utils-paste","text":"x, y, ... Vectors paste /combine collate Logical; TRUE prints combinations order first vector elements next; otherwise reversed (see examples) sep character string separate terms","code":""},{"path":"https://jmbarbone.github.io/mark/reference/utils-paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste combine — utils-paste","text":"character vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/utils-paste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste combine — utils-paste","text":"","code":"x <- letters[1:5] y <- 1:3 z <- month.abb[c(1, 12)] paste_combine(x, y) #>  [1] \"a1\" \"a2\" \"a3\" \"b1\" \"b2\" \"b3\" \"c1\" \"c2\" \"c3\" \"d1\" \"d2\" \"d3\" \"e1\" \"e2\" \"e3\" paste_combine(x, y, z) #>  [1] \"a1Jan\" \"a1Dec\" \"a2Jan\" \"a2Dec\" \"a3Jan\" \"a3Dec\" \"b1Jan\" \"b1Dec\" \"b2Jan\" #> [10] \"b2Dec\" \"b3Jan\" \"b3Dec\" \"c1Jan\" \"c1Dec\" \"c2Jan\" \"c2Dec\" \"c3Jan\" \"c3Dec\" #> [19] \"d1Jan\" \"d1Dec\" \"d2Jan\" \"d2Dec\" \"d3Jan\" \"d3Dec\" \"e1Jan\" \"e1Dec\" \"e2Jan\" #> [28] \"e2Dec\" \"e3Jan\" \"e3Dec\" paste_combine(x, y, z, sep = \".\") #>  [1] \"a.1.Jan\" \"a.1.Dec\" \"a.2.Jan\" \"a.2.Dec\" \"a.3.Jan\" \"a.3.Dec\" \"b.1.Jan\" #>  [8] \"b.1.Dec\" \"b.2.Jan\" \"b.2.Dec\" \"b.3.Jan\" \"b.3.Dec\" \"c.1.Jan\" \"c.1.Dec\" #> [15] \"c.2.Jan\" \"c.2.Dec\" \"c.3.Jan\" \"c.3.Dec\" \"d.1.Jan\" \"d.1.Dec\" \"d.2.Jan\" #> [22] \"d.2.Dec\" \"d.3.Jan\" \"d.3.Dec\" \"e.1.Jan\" \"e.1.Dec\" \"e.2.Jan\" \"e.2.Dec\" #> [29] \"e.3.Jan\" \"e.3.Dec\" paste_combine(x, y, sep = \"_\") #>  [1] \"a_1\" \"a_2\" \"a_3\" \"b_1\" \"b_2\" \"b_3\" \"c_1\" \"c_2\" \"c_3\" \"d_1\" \"d_2\" \"d_3\" #> [13] \"e_1\" \"e_2\" \"e_3\" paste_combine(x, y, collate = FALSE) #>  [1] \"a1\" \"b1\" \"c1\" \"d1\" \"e1\" \"a2\" \"b2\" \"c2\" \"d2\" \"e2\" \"a3\" \"b3\" \"c3\" \"d3\" \"e3\" collapse0(list(1:3, letters[1:3]), 5:7, letters[5:7]) #> [1] \"123abc567efg\" collapse0(1:3, letters[5:7], sep = \"_\") #> [1] \"1_2_3_e_f_g\""},{"path":"https://jmbarbone.github.io/mark/reference/vap.html","id":null,"dir":"Reference","previous_headings":"","what":"Vaps! — vap","title":"Vaps! — vap","text":"Wrappers vapply","code":""},{"path":"https://jmbarbone.github.io/mark/reference/vap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vaps! — vap","text":"","code":"vap_int(.x, .f, ..., .nm = FALSE)  vap_dbl(.x, .f, ..., .nm = FALSE)  vap_chr(.x, .f, ..., .nm = FALSE)  vap_lgl(.x, .f, ..., .nm = FALSE)  vap_cplx(.x, .f, ..., .nm = FALSE)  vap_date(.x, .f, ..., .nm = FALSE)"},{"path":"https://jmbarbone.github.io/mark/reference/vap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vaps! — vap","text":".x vector values .f function apply element vector .x ... Additional arguments passed .f .nm Logical, TRUE returns names .x (Note: .x names, set values)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/vap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vaps! — vap","text":"vector type matching intended value function name.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/vap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vaps! — vap","text":"simply wrappers base::vapply() shorten lines. function designed use specific vector types: vap_int integer vap_dbl double vap_chr character vap_lgl logical vap_cplx complex vap_date Date","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/mark/reference/vector2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector to data.frame — vector2df","title":"Vector to data.frame — vector2df","text":"Transforms vector (named) data.frame","code":""},{"path":"https://jmbarbone.github.io/mark/reference/vector2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector to data.frame — vector2df","text":"","code":"vector2df(x, name = \"name\", value = \"value\", show_NA)"},{"path":"https://jmbarbone.github.io/mark/reference/vector2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector to data.frame — vector2df","text":"x vector values. name, value Character strings name value columns show_NA Ignored; trigger warning set","code":""},{"path":"https://jmbarbone.github.io/mark/reference/vector2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector to data.frame — vector2df","text":"data.frame name (optional) value columns","code":""},{"path":"https://jmbarbone.github.io/mark/reference/with_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporary plotting — with_par","title":"Temporary plotting — with_par","text":"Reset par() running","code":""},{"path":"https://jmbarbone.github.io/mark/reference/with_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporary plotting — with_par","text":"","code":"with_par(..., ops = NULL)"},{"path":"https://jmbarbone.github.io/mark/reference/with_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporary plotting — with_par","text":"... Code evaluated ops named list passed graphics::par()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/with_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporary plotting — with_par","text":"Invisibly, result ...","code":""},{"path":"https://jmbarbone.github.io/mark/reference/with_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporary plotting — with_par","text":"","code":"with_par(   plot(lm(Sepal.Length ~ Sepal.Width, data = iris)),   plot(lm(Petal.Length ~ Petal.Width, data = iris)),   ops = list(mfrow = c(2, 4)) )"},{"path":"https://jmbarbone.github.io/mark/reference/within.html","id":null,"dir":"Reference","previous_headings":"","what":"within boundaries — within","title":"within boundaries — within","text":"Compare vector within () values","code":""},{"path":"https://jmbarbone.github.io/mark/reference/within.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"within boundaries — within","text":"","code":"between_more(x, left, right, type = c(\"gele\", \"gel\", \"gle\", \"gl\"))  within(x, left = NULL, right = NULL, bounds = c(\"[]\", \"[)\", \"(]\", \"()\"))"},{"path":"https://jmbarbone.github.io/mark/reference/within.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"within boundaries — within","text":"x numeric vector values left, right Boundary values.  within(), NULL comparison made boundary.  NULL, x just returned. type Abbreviation evaluation left right (see details) bounds Boundaries comparisons left right (see details)","code":""},{"path":"https://jmbarbone.github.io/mark/reference/within.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"within boundaries — within","text":"logical vector","code":""},{"path":"https://jmbarbone.github.io/mark/reference/within.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"within boundaries — within","text":"type``, bounds“ can one : g,( greater (>) ge,[ greater equal (>=) l,)) less (<) le,[] less equal (<=) Note: between_more() may deprecated future favor just within()","code":""},{"path":"https://jmbarbone.github.io/mark/reference/within.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"within boundaries — within","text":"","code":"between_more(2:10, 2, 10, \"gl\") #> [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE within(2:10, 2, bounds = \"()\") #> [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE between_more(10, 2, 10, \"gle\") #> [1] TRUE within(2:10, bounds = \"(]\") #> [1]  2  3  4  5  6  7  8  9 10 within(1:5, c(3, 3, 2, 2, 1), 5) #> [1] FALSE FALSE  TRUE  TRUE  TRUE"},{"path":"https://jmbarbone.github.io/mark/reference/within_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Function within — within_call","title":"Function within — within_call","text":"Returns function call within","code":""},{"path":"https://jmbarbone.github.io/mark/reference/within_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function within — within_call","text":"","code":"within_call()  within_fun()  outer_call(n = 0)  outer_fun(n = 0)"},{"path":"https://jmbarbone.github.io/mark/reference/within_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function within — within_call","text":"n number calls move ","code":""},{"path":"https://jmbarbone.github.io/mark/reference/within_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function within — within_call","text":"string call/function","code":""},{"path":"https://jmbarbone.github.io/mark/reference/write_file_md5.html","id":null,"dir":"Reference","previous_headings":"","what":"Write file with md5 hash check — write_file_md5","title":"Write file with md5 hash check — write_file_md5","text":"Write file md5 hash check","code":""},{"path":"https://jmbarbone.github.io/mark/reference/write_file_md5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write file with md5 hash check — write_file_md5","text":"","code":"write_file_md5(   x,   path = NULL,   method = mark_write_methods(),   overwrite = NA,   quiet = FALSE,   encoding = \"UTF-8\",   compression = getOption(\"mark.compress.method\", mark_compress_methods()),   ... )  mark_write_methods()  mark_compress_methods()"},{"path":"https://jmbarbone.github.io/mark/reference/write_file_md5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write file with md5 hash check — write_file_md5","text":"x object write file path file connection write (dependent part method) method method saving file.  default, method determined file extension path, present, otherwise type object x. overwrite NA, saves md5 hashes match. Otherwise, see fs::file_copy(). quiet TRUE, suppresses messages md5 checks. encoding encoding use writing file. compression compression method use writing file. ... Additional arguments passed write function.","code":""},{"path":"https://jmbarbone.github.io/mark/reference/write_file_md5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write file with md5 hash check — write_file_md5","text":"write_file_md5(): x, invisibly.  path stdout(), x returned attribute \"path\" set result file_copy_md5(). mark_write_methods(): list applicable methods aliases mark_compress_methods(): character vector applicable compression methods","code":""},{"path":"https://jmbarbone.github.io/mark/reference/write_file_md5.html","id":"options-","dir":"Reference","previous_headings":"","what":"options()","title":"Write file with md5 hash check — write_file_md5","text":"mark.compress.method: compression method use writing files mark.list.hook: data.frame contains list column, function applied element list.  default \"auto\" uses toJSON() package jsonlite available, otherwise","code":""},{"path":"https://jmbarbone.github.io/mark/reference/write_file_md5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write file with md5 hash check — write_file_md5","text":"","code":"# just writes to stdout() df <- data.frame(a = 1, b = 2) write_file_md5(df) #> \"a\" \"b\" #> 1 2  temp <- tempfile() write_file_md5(df, temp) # new #> <fileCopyMd5Message> /tmp/RtmprmvHIh/file1c735957d245 (new file) #> package:mark write_file_md5(df, temp) # same #> <fileCopyMd5Message> /tmp/RtmprmvHIh/file1c735957d245 (md5 same) #> package:mark df$c <- 3 write_file_md5(df, temp) # changes #> <fileCopyMd5Message> /tmp/RtmprmvHIh/file1c735957d245 (md5 change) #> package:mark fs::file_delete(temp)"},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-development-version","dir":"Changelog","previous_headings":"","what":"mark (development version)","title":"mark (development version)","text":"make_sf() now uses substitute() provide information inside function body viewing #129","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-083","dir":"Changelog","previous_headings":"","what":"mark 0.8.3","title":"mark 0.8.3","text":"CRAN release: 2025-04-23 file_copy_md5() now produces messages #239 file_copy_md5() saves md5 sum checks attribute removes tests struct() #252","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-082","dir":"Changelog","previous_headings":"","what":"mark 0.8.2","title":"mark 0.8.2","text":"CRAN release: 2024-12-07 read_clipboard() write_clipboard() now use clipr work non-Windows platforms #125 read_clipboard() now works methods reading data.frames read_clipboard() now defaults tibble return tibble available timezone testing updated #247 actions updated","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-081","dir":"Changelog","previous_headings":"","what":"mark 0.8.1","title":"mark 0.8.1","text":"CRAN release: 2024-09-29 write_file_md5() now supports \"feather\" \"parquet\" methods wrappers {arrow} #234 md5() added provide MD5 check sums objects #233 unique_rows() added subset (non-)duplicated rows data.frame #87 within() added alternative between_more() #120 test updated upcoming R release #240","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-080","dir":"Changelog","previous_headings":"","what":"mark 0.8.0","title":"mark 0.8.0","text":"CRAN release: 2024-05-23","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"breaking-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"breaking changes","title":"mark 0.8.0","text":"echo() now removed; use echo::echo() instead #214 includes tryn() running expression maximum number times failure #80","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"fixes","title":"mark 0.8.0","text":"unlist0() longer fails input list named #220","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"improvements","title":"mark 0.8.0","text":"can now return multiple matches #191, can return partial matches error message readability improved matchParamMatchError#194 choices can now list formula elements, preserving return value","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"new features","title":"mark 0.8.0","text":"file_copy_md5() added wrapper fs::file_copy() provides MD5 checks tools::md5sum() avoid overwriting files content changes #207 write_file_md5() added general writing function utilizes file_copy_md5() MD5 checks (including compression options) #207, #224","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-070","dir":"Changelog","previous_headings":"","what":"mark 0.7.0","title":"mark 0.7.0","text":"CRAN release: 2023-10-23 merge_list() added combining lists #200 glob() added basic wildcard globbing character vectors #167 adds greater use fs base file functions #160 File extension can now set #170, default includes qmd (#163) py files new parameter ignore ignore files file paths line numbers can now clicked within RStudio #171 adds use rlang::list2() internally #199 GitHub action included check version updates pull requests #211 %::% %:::% now exported fuj","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-061","dir":"Changelog","previous_headings":"","what":"mark 0.6.1","title":"mark 0.6.1","text":"CRAN release: 2023-09-18 updates Timezone references upcoming R release #203","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-060","dir":"Changelog","previous_headings":"","what":"mark 0.6.0","title":"mark 0.6.0","text":"CRAN release: 2023-05-06","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"mark 0.6.0","text":"is_blank() detecting blank values vector is_blank_cols() detecting blank columns select_blank_cols() selecting blank columns remove_blank_cols() removing blank columns match_param() now accepts named listed alias matching #104 echo() evaluates expressions logs outputs #164 multiple functions now re-exported fuj (see ?mark::reexports) set_names0() deprecated favor set_names() error messages created fuj::new_condition(); test errors warnings enhanced class checks","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"fixes-and-updates-0-6-0","dir":"Changelog","previous_headings":"","what":"Fixes and updates","title":"mark 0.6.0","text":"date_from_partial() works #155 fixing issue internal utility is_valid_date_string() wasn’t recognizing %Y-%m-%d (potentially others) lintr GitHub action updated #173; includes plenty internal improvements code cleanup package description help files corrected #165 GitHub pages updated latest pkgdown action #175 Update GitHub R-CMD-check action #178 switch_in_case() handles NAs better #183 internal switch tests updated waldo development #182 thanks, @hadley methods write_clipboard() now displayed documentation #186","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-053","dir":"Changelog","previous_headings":"","what":"mark 0.5.3","title":"mark 0.5.3","text":"CRAN release: 2022-10-16 CRAN fix new release #151","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-052","dir":"Changelog","previous_headings":"","what":"mark 0.5.2","title":"mark 0.5.2","text":"CRAN release: 2022-10-01","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-5-2","dir":"Changelog","previous_headings":"","what":"New features","title":"mark 0.5.2","text":"normalize() added normalize values vectors, matrices, data.frames specified ranges boundaries #143 get_labels() label related functions now get exact matches \"label\" attributes #141 recode_only(), recode_by() now accept named list() #96] switch_in_case() now handles functions right hand statements update_version() now correctly checks result embedded utils::menu() call updating version #123 require_namespace() now accepts multiple namespaces #121 unique.fact() S3 method #86 recode_only() recode_by() can accept single value val #73 fact_reverse() reversing fact levels #78 .Date.fact() added #108 .character.fact() added [.fact added read_bib() better handles fields = present text #117","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"Fixes","title":"mark 0.5.2","text":"fact.haven_labelled() works properly retains label attribute #136 drop_levels() exported #105 recode_by() recode_only() handle factors better #81 Functions made use shell.exec() now try determine appropriate method opening file base OS. #126 Internal functions potentially coercing factor levels dates longer try check \"%Z\" date format #147","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"breaking-changes-0-5-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"mark 0.5.2","text":"reverse() removed (use flip() instead) assign_label() removed (use assign_labels() instead) percentile_rank(times) deprecated favor percent_rank(weights)","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"non-visible-changes-0-5-2","dir":"Changelog","previous_headings":"","what":"Non visible changes","title":"mark 0.5.2","text":"print.fact() rewritten slightly modified print.factor() #109 percentile_rank() improvements #131","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-051","dir":"Changelog","previous_headings":"","what":"mark 0.5.1","title":"mark 0.5.1","text":"CRAN release: 2022-08-06 Fix CRAN check #128","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-050","dir":"Changelog","previous_headings":"","what":"mark 0.5.0","title":"mark 0.5.0","text":"CRAN release: 2022-03-09 package website https://jmbarbone.github.io/mark/ now available! references vignettes make way future releases.","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"mark 0.5.0","text":"detail(NA) (x NA values) longer throws warning returns NA min_c, max_c #59 print.noted() now passes ... next methods #67 assign_label() removed 0.4.2 set_not_available() now seems work correctly – probably hasn’t actually working time percentile_rank() now correct x decimal checking unique values first #92 counts.data.frame() now handle factor columns better","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"mark 0.5.0","text":"Functions ?handlers, allow additional params passed ... #34 adds row_bind() bind list data.frames() #46 adds drop_levels() factor data.frame methods; functions similarly base::droplevels() little faster #54 TRUE, forces searches .R files given directory contain .Rproj file FALSE, prevents long start ups functions called .Rprofile file R launches project directory toggled new options mark.todos.force adds set_note(), wrapper note<-() #77 adds fact2char() compliment char2fact() #75 print.pseudo_id() now truncates long uniques single line #70 match_param(NULL, null = TRUE) allows param safely return NULL #89 fact_na() added use fact vectors NA levels work .na() #69 NA handling improvements adds new print._mark_bib_df() method supporting printing lists adds new methods facts: .integer.fact(), .double.fact(), remove_na.fact()","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"mark 0.5.0","text":"fact.numeric() now treats NaN NA, extra level/unique value retained read_clipboard() now returns NA clipboard empty, rather \"\" (improvements internal type conversions) improvements NA handling well","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"other-non-visible-0-5-0","dir":"Changelog","previous_headings":"","what":"Other, non-visible","title":"mark 0.5.0","text":"github actions updated internal type conversion now heavily relies utils::type.convert() additional functionality logical (e.g., character string using \"true\" \"false\") guessing dates YYYY-MM-DD format general clean formatting","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-041","dir":"Changelog","previous_headings":"","what":"mark 0.4.1","title":"mark 0.4.1","text":"CRAN release: 2021-11-05 details(factor) longer adds fact class factors #50 details() gains new argument factor_n control threshold making character vectors factors detail.data.frame() now works single column data.frames #48 paste_combine() longer duplicated second vector ... length(...) > 2 #52","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-040","dir":"Changelog","previous_headings":"","what":"mark 0.4.0","title":"mark 0.4.0","text":"CRAN release: 2021-10-22","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"mark 0.4.0","text":"adds percentile_rank() calculate percentile ranks vector adds insert() insert multiple values vector pseudo_id() gains argument na_last change positioning NA values is_true() is_false() now exported generics methods default logical adds omit_na() tracking positions NA non-NA values quick_df(NULL) now returns empty data.frame quick_dfl() exported wrapper quick_df(list(...))","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"mark 0.4.0","text":"squash_vec() now works correctly values ordered #43 as_ordered() longer duplicates ordered class #44 counts.data.frame() props.data.frame() correctly make column names unique internal try_numeric() correctly handles NAs flip.matrix(, keep_rownames = FALSE) now works correctly any_match() now works expected lines_of_r_code() now works correctly reading single file import(, overwrite = TRUE) now works ls_function(), ls_object(), ls_dataframe(), ls_all() improvements environmental searching assign_labels.data.frame(.missing = \"warning\") correctly removes missing columns remove_na.factor() long drops additional classes ordered factor","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"others-0-4-0","dir":"Changelog","previous_headings":"","what":"Others","title":"mark 0.4.0","text":"documentation struct() overwriting attributes improved examples adds unit tests","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-030","dir":"Changelog","previous_headings":"","what":"mark 0.3.0","title":"mark 0.3.0","text":"CRAN release: 2021-09-18","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"mark 0.3.0","text":"fact.haven_labelled() now returns object class fact #39; performance enhancements set_names0(NULL) longer causes error returns NULL #40 diff_time() correctly handles time zones x Date y POSIXt #41","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"mark 0.3.0","text":"updates file path finding functions (e.g., list_files()) try search every file depending desired searches (e.g., full file paths just base names) as_ordered() handles factors better; S3 methods removed: as_ordered.ordered(), as_ordered.factor() remove_na() better performance x NA values counts.data.frame() props.data.frame() retain attributes selected columns todos() fixmes() search .R .Rmd files path changed \"\" .Rproj found within directory","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"mark 0.3.0","text":"adds unlist0() retain original names lists adds %names% fun way set names adds file_open() alias open_file() adds detail() return data.frame details vector columns data.frame adds squash_vec() combined names vector repeated values adds make_sf() simple wrapper package specific system.file() add_file_timestampe() gains new parameter sep separate file name (sans ext) time stamp assign_labels.data.frame() gains new argument .ls explicitly set list (data.frame) columns props() family gain argument na.rm count NA values proportions","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-020","dir":"Changelog","previous_headings":"","what":"mark 0.2.0","title":"mark 0.2.0","text":"CRAN release: 2021-08-23","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"mark 0.2.0","text":"package_available() now visibly returns TRUE/FALSE remove_na() now methods lists factors environments() now ’s print.mark_environments() method rather calling cat() within function array_extract()’s first argument changed arr .arr diff_time() now defaults using UTC (Related #32) print x normally, without note class just note seen internal function now handles note formatted class noted fact() now returns vector fact element fact.character() correctly labels NAs #24 fact.factor() longer simply returns x rather updates levels integer values confirm fact() methods. fact.factor() retain levels original value, reorder levels, append NA necessary fact.fact() added return correctly formatted fact() fact.logical() now orders levels TRUE FALSE, NA present fact.Date() fact.POSIXt() added, simply call fact.numeric() print.fact() method added print fact vector factor as_ordered.factor() as_ordered.ordered() now call fact() check levels","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"mark 0.2.0","text":"functions check argument vector long use .vector() directly; arguments passed attributes removed fulfill .vector() accepted todos() fixmes() now correctly show tags .Rmd files correction error message limit() adds missing sort argument props() pseudo_id.factor() longer returns NA_integer value NA level NA correctly resets order levels factor order appearance flip.data.frame() longer coerces single column data.frames #36","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"mark 0.2.0","text":"fact.pseudo_id() pseudo_id.pseudo_id() methods added adds as_ordered() quickly create ordered factors using fact() adds char2fact() convert character vectors (columns data.frame) factors based number unique values adds tableNA() make table NA values round_by() gains additional argument include0 FALSE replace 0 values assign_labels.data.frame() gains additional argument .missing set control missing labels: can now use warning missing label (instead error) silently ignore missing labels sort_names() gains new argument numeric try sort names x numeric value #26 adds struct(), simplified version struct() fact.integer() #30 fact.haven_labelled() #31 todos() fixmes() gain additional argument path specify directory file search within #25 print.pseudo_id() added cleaner print between_more() accepts vectors left right params","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"non-visible-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Non visible changes","title":"mark 0.2.0","text":"code coverage added additional tests added","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-014","dir":"Changelog","previous_headings":"","what":"mark 0.1.4","title":"mark 0.1.4","text":"CRAN release: 2021-07-16 visible user changes removes temporarily created files #22","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"mark-013","dir":"Changelog","previous_headings":"","what":"mark 0.1.3","title":"mark 0.1.3","text":"CRAN release: 2021-06-16 New name! previous name jordan conflicting recent package CRAN.","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Changes","title":"mark 0.1.3","text":"grep() also now evaluated cleaned todo text searches todos() Rmd files, correctly removes additional # spaces lines (e.g., #  # TODO text -> text) corrects NA counting counts(); NA counts now appended end whether sort called optimization counts() core functions previously base::rle() now use combination pseudo_id() base::tabulate() corrects counts factor data higher levels present #16 update multi_grepl() internal functions prevent conflicts R 4.1.0 corrects error message vector2df() passed list","code":""},{"path":"https://jmbarbone.github.io/mark/news/index.html","id":"new-features-0-1-3","dir":"Changelog","previous_headings":"","what":"New features","title":"mark 0.1.3","text":"adds/exports fact() pseudo_id() adds fixmes() #13 adds names_switch() switch names values vector2df() can now output 1 column data.frame name = NULL adds invert parameter complete_cases() filter incomplete cases adds are_identical() comparing 2 vectors identical(), element-wise adds add_file_timestamp() diff_time() related functions try convert y Date object x passed date (e.g., diff_time_days(Sys.Date(), \"2021-06-03\") show decimals)","code":""}]
